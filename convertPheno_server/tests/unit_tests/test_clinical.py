# Generated by CodiumAI
from server.apis.clinical import find_node_by_node_name_get_path
from server.apis.clinical import return_basic_table_row
from server.apis.clinical import generate_url


class TestFindNodeByNodeNameGetPath:
    def test_query_matches_root_node_name(self):
        tree = {
            "name": "root",
            "children": [
                {"name": "child1", "children": []},
                {"name": "child2", "children": []},
            ],
        }
        query = "root"
        expected_path = ["root"]

        result = find_node_by_node_name_get_path(tree, query)

        assert result == expected_path, "The function did not return the correct path"

    def test_query_matches_child_node_name(self):
        tree = {
            "name": "A",
            "children": [{"name": "B", "children": [{"name": "C", "children": []}]}],
        }
        query = "C"
        expected_path = ["A", "B", "C"]

        result = find_node_by_node_name_get_path(tree, query)

        assert result == expected_path, "The function did not return the correct path"


class TestReturnBasicTableRow:
    def test_valid_input_data(self):
        # Test input data
        idx = 0
        row = {
            "id": {"label": "12345", "id": "NCIT:C12345"},
            "name": "John Doe",
            "age": 30,
        }
        table_config = {
            "row_data_default": {"#": None, "id": None, "name": None, "age": None}
        }
        selected_fields = {"id": ["id", "label"], "name": [], "age": []}

        ncit_base = "https://ncit.nci.nih.gov/ncitbrowser/ConceptReport.jsp"
        ncit_query = "?dictionary=NCI_Thesaurus&code=C12345"

        # Expected output
        expected_output = {
            "#": 1,
            "id": {
                "data": "12345",
                "count": 1,
                "values": ["12345"],
                "ontology_ids": ["NCIT:C12345"],
                "urls": [f"{ncit_base}{ncit_query}"],
            },
            "name": "John Doe",
            "age": 30,
        }

        # Call the function under test
        output = return_basic_table_row(idx, row, table_config, selected_fields)

        # Check the output against the expected output
        assert output == expected_output


class TestGenerateUrl:
    def test_returns_snomed_url_for_valid_ontology_id(self):
        ontology_id = "SNOMED:12345"

        snomed_base = "https://browser.ihtsdotools.org/?perspective=full"
        snomed_query = "&conceptId1=12345&edition=MAIN&release=&languages=en"

        expected_url = f"{snomed_base}{snomed_query}"

        assert generate_url(ontology_id) == expected_url

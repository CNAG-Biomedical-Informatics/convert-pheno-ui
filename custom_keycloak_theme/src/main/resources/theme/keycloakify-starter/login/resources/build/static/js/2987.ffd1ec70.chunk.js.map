{"version":3,"file":"static/js/2987.ffd1ec70.chunk.js","mappings":"2OAQe,SAASA,EACtBC,GAKA,IAAQC,EAAwDD,EAAxDC,UAAWC,EAA6CF,EAA7CE,KAAMC,EAAuCH,EAAvCG,gBAAiBC,EAAsBJ,EAAtBI,SAAUC,EAAYL,EAAZK,QAE5CC,GAAiBC,EAAAA,EAAAA,GAAgB,CACvCJ,gBAAAA,EACAE,QAAAA,IAFMC,aAKAE,EAAgBN,EAAhBM,IAAKC,EAAWP,EAAXO,OAELC,EAAQT,EAARS,IAERC,GAAgDC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAxDI,EAAgBF,EAAA,GAAEG,EAAmBH,EAAA,GAE5CI,QAAQC,IAAI,oBAAqB,CAC/BjB,UAAAA,EACAC,KAAAA,EACAC,gBAAAA,EACAE,QAAAA,IAmBF,IAAMc,EAAyBlB,EAAUmB,QAAQC,WAAWC,QAC1D,SAACC,GAAG,MAAkB,UAAbA,EAAIC,IAAgB,IAGzBC,EAA6BxB,EAAUmB,QAAQC,WAAWC,QAC9D,SAACC,GAAG,MAAkB,cAAbA,EAAIC,IAAoB,IAG7BE,EAA4BzB,EAAUmB,QAAQC,WAAWC,QAC7D,SAACC,GAAG,MAAkB,aAAbA,EAAIC,IAAmB,IAoBlC,OAjBAL,EAAuB,GAAGQ,UAAW,EACrCF,EAA2B,GAAGE,UAAW,EACzCD,EAA0B,GAAGC,UAAW,EAExC1B,EAAUmB,QAAQQ,iBAAiBC,MAAMF,UAAW,EACpD1B,EAAUmB,QAAQQ,iBAAiBE,UAAUH,UAAW,EACxD1B,EAAUmB,QAAQQ,iBAAiBG,SAASJ,UAAW,GAYrDK,EAAAA,EAAAA,KAAC5B,EAAQ,CACDH,UAAAA,EAAWC,KAAAA,EAAMC,gBAAAA,EAAiBE,QAAAA,EACxC4B,WAAYzB,EAAI,8BAA8B0B,UAE9CC,EAAAA,EAAAA,MAAA,QACEC,GAAG,6BACHC,UAAW/B,EAAa,eACxBgC,OAAQ5B,EAAI6B,YACZC,OAAO,OAAMN,SAAA,EAEbF,EAAAA,EAAAA,KAACS,EAAAA,EAAqB,CACpBxC,UAAWA,EACXyC,+BAAgC1B,EAChCd,KAAMA,EACNI,aAAcA,KAEhB6B,EAAAA,EAAAA,MAAA,OAAKE,UAAW/B,EAAa,oBAAoB4B,SAAA,EAC/CF,EAAAA,EAAAA,KAAA,OACEI,GAAG,kBACHC,UAAW/B,EAAa,sBAAsB4B,UAE9CF,EAAAA,EAAAA,KAAA,OAAKK,UAAW/B,EAAa,kCAE/B0B,EAAAA,EAAAA,KAAA,OACEI,GAAG,kBACHC,UAAW/B,EAAa,sBAAsB4B,UAE9CF,EAAAA,EAAAA,KAAA,SACEK,WAAWM,EAAAA,EAAAA,GACTrC,EAAa,iBACbA,EAAa,wBACbA,EAAa,sBACbA,EAAa,uBAEfsC,KAAK,SACLC,MAAOpC,EAAO,YACdqC,UAAW/B,aAOzB,C,kGC3GM,SAAU0B,EAAsBzC,GAClC,IAAQC,EAA2FD,EAA3FC,UAAWyC,EAAgF1C,EAAhF0C,+BAAgCxC,EAAgDF,EAAhDE,KAAMI,EAA0CN,EAA1CM,aAAcyC,EAA4B/C,EAA5B+C,YAAaC,EAAehD,EAAfgD,WAE5EC,EAAqB/C,EAArB+C,YAAazC,EAAQN,EAARM,IAErB0C,GAIIC,EAAAA,EAAAA,GAAkB,CAClBlD,UAAAA,EACAC,KAAAA,IACFkD,EAAAF,EANEG,oBAAuBC,EAAyBF,EAAzBE,0BAA2BC,EAAiBH,EAAjBG,kBAClDC,EAAsBN,EAAtBM,uBACAC,EAAsBP,EAAtBO,wBAMJC,EAAAA,EAAAA,YAAU,WACNhB,EAA+Ba,EACnC,GAAG,CAACA,IAEJ,IAAII,EAAe,GAEnB,OACI3B,EAAAA,EAAAA,KAAA4B,EAAAA,SAAA,CAAA1B,SACKuB,EAAuBI,KAAI,SAACC,EAAWC,G,MACpCC,EAA8EF,EAAtEG,MAAAA,OAAK,IAAAD,EAAG,GAAEA,EAAAE,EAA4DJ,EAA1DK,mBAAAA,OAAkB,IAAAD,EAAG,GAAEA,EAAAE,EAAmCN,EAAjCO,wBAAAA,OAAuB,IAAAD,EAAG,GAAEA,EAEzEE,EAAqChB,EAA0BQ,EAAUtC,MAAjEqB,EAAKyB,EAALzB,MAAO0B,EAAiBD,EAAjBC,kBAETC,GAAqB7B,EAAAA,EAAAA,GACvBrC,EAAa,oBACgB,IAA7BiE,EAAkBE,QAAgBnE,EAAa,0BAGnD,OACI6B,EAAAA,EAAAA,MAACuC,EAAAA,SAAQ,CAAAxC,SAAA,CACJ+B,IAAUN,GAA2C,MAA1BA,EAAeM,KACvC9B,EAAAA,EAAAA,MAAA,MAAAwC,OAAAC,OAAA,CAAKvC,UAAWmC,GAAkB,CAAAtC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,MAAA2C,OAAAC,OAAA,CAAKvC,UAAW/B,EAAa,0BAAwB,CAAA4B,UACjDF,EAAAA,EAAAA,KAAA,QAAA2C,OAAAC,OAAA,CAAOxC,GAAE,UAAAyC,OAAYZ,GAAS5B,UAAW/B,EAAa,sBAAoB,CAAA4B,SACrEe,EAAYkB,IAAuBR,QAGf,KAA5BU,IACGrC,EAAAA,EAAAA,KAAA,MAAA2C,OAAAC,OAAA,CAAKvC,UAAW/B,EAAa,wBAAsB,CAAA4B,UAC/CF,EAAAA,EAAAA,KAAA,QAAA2C,OAAAC,OAAA,CAAOxC,GAAE,eAAAyC,OAAiBZ,GAAS5B,UAAW/B,EAAa,iBAAe,CAAA4B,SACrEe,EAAYoB,aAOhCtB,IAAef,EAAAA,EAAAA,KAACe,EAAW,CAACe,UAAWA,KAExC3B,EAAAA,EAAAA,MAAA,MAAAwC,OAAAC,OAAA,CAAKvC,UAAWmC,GAAkB,CAAAtC,SAAA,EAC9BC,EAAAA,EAAAA,MAAA,MAAAwC,OAAAC,OAAA,CAAKvC,UAAW/B,EAAa,wBAAsB,CAAA4B,SAAA,EAC/CF,EAAAA,EAAAA,KAAA,QAAA2C,OAAAC,OAAA,CAAOE,QAAShB,EAAUtC,KAAMa,UAAW/B,EAAa,iBAAe,CAAA4B,SAClEe,EAAiC,QAArB8B,EAAAjB,EAAUkB,mBAAW,IAAAD,EAAAA,EAAI,OAEzCjB,EAAUnC,WAAYK,EAAAA,EAAAA,KAAA4B,EAAAA,SAAA,CAAA1B,SAAA,WAE3BC,EAAAA,EAAAA,MAAA,MAAAwC,OAAAC,OAAA,CAAKvC,UAAW/B,EAAa,wBAAsB,CAAA4B,SAAA,CAC7C,WACE,IAAQ+C,EAAYnB,EAAUoB,WAAtBD,QAER,YAAgBE,IAAZF,GAEIjD,EAAAA,EAAAA,KAAA,SAAA2C,OAAAC,OAAA,CACIxC,GAAI0B,EAAUtC,KACdA,KAAMsC,EAAUtC,KAChB4D,SAAU,SAAAC,GAAK,OACX7B,EAAuB,CACnB,OAAU,eACV,KAAQM,EAAUtC,KAClB,SAAY6D,EAAMC,OAAOzC,OAC3B,EAEN0C,OAAQ,kBACJ/B,EAAuB,CACnB,OAAU,aACV,KAAQM,EAAUtC,MACpB,EAENqB,MAAOA,GAAK,CAAAX,UAEZC,EAAAA,EAAAA,MAAAyB,EAAAA,SAAA,CAAA1B,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAA2C,OAAAC,OAAA,CAAQ/B,MAAM,GAAG2C,UAAQ,EAAC1C,UAAQ,EAAC2C,QAAM,IAAAvD,SACpC1B,EAAI,qBAERyE,EAAQA,QAAQpB,KAAI,SAAA6B,GAAM,OACvB1D,EAAAA,EAAAA,KAAA,SAAA2C,OAAAC,OAAA,CAAqB/B,MAAO6C,GAAM,CAAAxD,SAC7BwD,IADQA,EAEJ,WAQzB1D,EAAAA,EAAAA,KAAA,SACIY,KAAO,WACH,OAAQkB,EAAUtC,MACd,IAAK,mBACL,IAAK,WACD,MAAO,WACX,QACI,MAAO,OAEnB,CARO,GASPY,GAAI0B,EAAUtC,KACdA,KAAMsC,EAAUtC,KAChBqB,MAAOA,EACPuC,SAAU,SAAAC,GAAK,OACX7B,EAAuB,CACnB,OAAU,eACV,KAAQM,EAAUtC,KAClB,SAAY6D,EAAMC,OAAOzC,OAC3B,EAEN0C,OAAQ,kBACJ/B,EAAuB,CACnB,OAAU,aACV,KAAQM,EAAUtC,MACpB,EAENa,UAAW/B,EAAa,gBAAe,eACI,IAA7BiE,EAAkBE,OAChC3B,SAAUgB,EAAU6B,SACpBC,aAAc9B,EAAU+B,cAGpC,CAtEE,GAuE4B,IAA7BtB,EAAkBE,QACd,WACG,IAAMqB,EAAQ,eAAHjB,OAAkBf,EAAUtC,MAEvC,OACIW,EAAAA,EAAAA,MAAAyB,EAAAA,SAAA,CAAA1B,SAAA,EACIF,EAAAA,EAAAA,KAAA,SAAAE,SAAA,IAAA2C,OAAYiB,EAAK,mCACjB9D,EAAAA,EAAAA,KAAA,OAAA2C,OAAAC,OAAA,CACIxC,GAAI0D,EACJzD,UAAW/B,EAAa,4BACxByF,MAAO,CACH,SAAyC,IAA7BxB,EAAkBE,OAAe,gBAAaU,GAC7D,YACS,UAAQ,CAAAjD,SAEjBqC,EAAkBV,KAAI,SAAAmC,GAAe,OAAAA,EAAZC,YAA+B,SAIzE,CAlBC,WAqBZjD,IAAchB,EAAAA,EAAAA,KAACgB,EAAU,CAACc,UAAWA,MAzH3BC,EA4HvB,KAGZ,C","sources":["keycloak-theme/login/pages/IdpReviewUserProfile.tsx","../node_modules/keycloakify/src/login/pages/shared/UserProfileFormFields.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { UserProfileFormFields } from \"keycloakify/login/pages/shared/UserProfileFormFields\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function IdpReviewUserProfile(\n  props: PageProps<\n    Extract<KcContext, { pageId: \"idp-review-user-profile.ftl\" }>,\n    I18n\n  >\n) {\n  const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n  const { getClassName } = useGetClassName({\n    doUseDefaultCss,\n    classes,\n  });\n\n  const { msg, msgStr } = i18n;\n\n  const { url } = kcContext;\n\n  const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n  console.log(\"UpdateUserProfile\", {\n    kcContext,\n    i18n,\n    doUseDefaultCss,\n    classes,\n  });\n\n  // const profileAttributesWithoutEmail = kcContext.profile.attributes.filter(\n  //   (obj) => obj.name !== \"email\"\n  // );\n\n  // // remove firstName\n  // const profileAttributesWithoutFirstName =\n  //   profileAttributesWithoutEmail.filter((obj) => obj.name !== \"firstName\");\n\n  // // remove lastName\n  // const profileAttributesWithoutLastName =\n  //   profileAttributesWithoutFirstName.filter((obj) => obj.name !== \"lastName\");\n\n  // console.log(\"UpdateUserProfile\", {\n  //   profileAttributesWithoutEmail,\n  // });\n\n  const profileAttributesEmail = kcContext.profile.attributes.filter(\n    (obj) => obj.name === \"email\"\n  );\n\n  const profileAttributesFirstName = kcContext.profile.attributes.filter(\n    (obj) => obj.name === \"firstName\"\n  );\n\n  const profileAttributesLastName = kcContext.profile.attributes.filter(\n    (obj) => obj.name === \"lastName\"\n  );\n\n  profileAttributesEmail[0].required = false;\n  profileAttributesFirstName[0].required = false;\n  profileAttributesLastName[0].required = false;\n\n  kcContext.profile.attributesByName.email.required = false;\n  kcContext.profile.attributesByName.firstName.required = false;\n  kcContext.profile.attributesByName.lastName.required = false;\n\n  // console.log(\"profileAttributesEmail\", {\n  //   profileAttributesEmail,\n  // });\n\n  // kcContext.profile.attributes = profileAttributesWithoutLastName;\n  // delete kcContext.profile.attributesByName.email;\n  // delete kcContext.profile.attributesByName.firstName;\n  // delete kcContext.profile.attributesByName.lastName;\n\n  return (\n    <Template\n      {...{ kcContext, i18n, doUseDefaultCss, classes }}\n      headerNode={msg(\"loginIdpReviewProfileTitle\")}\n    >\n      <form\n        id=\"kc-idp-review-profile-form\"\n        className={getClassName(\"kcFormClass\")}\n        action={url.loginAction}\n        method=\"post\"\n      >\n        <UserProfileFormFields\n          kcContext={kcContext}\n          onIsFormSubmittableValueChange={setIsFomSubmittable}\n          i18n={i18n}\n          getClassName={getClassName}\n        />\n        <div className={getClassName(\"kcFormGroupClass\")}>\n          <div\n            id=\"kc-form-options\"\n            className={getClassName(\"kcFormOptionsClass\")}\n          >\n            <div className={getClassName(\"kcFormOptionsWrapperClass\")} />\n          </div>\n          <div\n            id=\"kc-form-buttons\"\n            className={getClassName(\"kcFormButtonsClass\")}\n          >\n            <input\n              className={clsx(\n                getClassName(\"kcButtonClass\"),\n                getClassName(\"kcButtonPrimaryClass\"),\n                getClassName(\"kcButtonBlockClass\"),\n                getClassName(\"kcButtonLargeClass\")\n              )}\n              type=\"submit\"\n              value={msgStr(\"doSubmit\")}\n              disabled={!isFomSubmittable}\n            />\n          </div>\n        </div>\n      </form>\n    </Template>\n  );\n}\n","import { useEffect, Fragment } from \"react\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useFormValidation } from \"keycloakify/login/lib/useFormValidation\";\nimport type { Attribute } from \"keycloakify/login/kcContext/KcContext\";\nimport type { I18n } from \"../../i18n\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"];\n    i18n: I18n;\n    getClassName: (classKey: ClassKey) => string;\n    onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    BeforeField?: (props: { attribute: Attribute }) => JSX.Element | null;\n    AfterField?: (props: { attribute: Attribute }) => JSX.Element | null;\n};\n\nexport function UserProfileFormFields(props: UserProfileFormFieldsProps) {\n    const { kcContext, onIsFormSubmittableValueChange, i18n, getClassName, BeforeField, AfterField } = props;\n\n    const { advancedMsg, msg } = i18n;\n\n    const {\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n        formValidationDispatch,\n        attributesWithPassword\n    } = useFormValidation({\n        kcContext,\n        i18n\n    });\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    let currentGroup = \"\";\n\n    return (\n        <>\n            {attributesWithPassword.map((attribute, i) => {\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                const formGroupClassName = clsx(\n                    getClassName(\"kcFormGroupClass\"),\n                    displayableErrors.length !== 0 && getClassName(\"kcFormGroupErrorClass\")\n                );\n\n                return (\n                    <Fragment key={i}>\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                            <div className={formGroupClassName}>\n                                <div className={getClassName(\"kcContentWrapperClass\")}>\n                                    <label id={`header-${group}`} className={getClassName(\"kcFormGroupHeader\")}>\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\n                                    </label>\n                                </div>\n                                {groupDisplayDescription !== \"\" && (\n                                    <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                        <label id={`description-${group}`} className={getClassName(\"kcLabelClass\")}>\n                                            {advancedMsg(groupDisplayDescription)}\n                                        </label>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n\n                        {BeforeField && <BeforeField attribute={attribute} />}\n\n                        <div className={formGroupClassName}>\n                            <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                <label htmlFor={attribute.name} className={getClassName(\"kcLabelClass\")}>\n                                    {advancedMsg(attribute.displayName ?? \"\")}\n                                </label>\n                                {attribute.required && <>*</>}\n                            </div>\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                {(() => {\n                                    const { options } = attribute.validators;\n\n                                    if (options !== undefined) {\n                                        return (\n                                            <select\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                onChange={event =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"update value\",\n                                                        \"name\": attribute.name,\n                                                        \"newValue\": event.target.value\n                                                    })\n                                                }\n                                                onBlur={() =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"focus lost\",\n                                                        \"name\": attribute.name\n                                                    })\n                                                }\n                                                value={value}\n                                            >\n                                                <>\n                                                    <option value=\"\" selected disabled hidden>\n                                                        {msg(\"selectAnOption\")}\n                                                    </option>\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </>\n                                            </select>\n                                        );\n                                    }\n\n                                    return (\n                                        <input\n                                            type={(() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })()}\n                                            id={attribute.name}\n                                            name={attribute.name}\n                                            value={value}\n                                            onChange={event =>\n                                                formValidationDispatch({\n                                                    \"action\": \"update value\",\n                                                    \"name\": attribute.name,\n                                                    \"newValue\": event.target.value\n                                                })\n                                            }\n                                            onBlur={() =>\n                                                formValidationDispatch({\n                                                    \"action\": \"focus lost\",\n                                                    \"name\": attribute.name\n                                                })\n                                            }\n                                            className={getClassName(\"kcInputClass\")}\n                                            aria-invalid={displayableErrors.length !== 0}\n                                            disabled={attribute.readOnly}\n                                            autoComplete={attribute.autocomplete}\n                                        />\n                                    );\n                                })()}\n                                {displayableErrors.length !== 0 &&\n                                    (() => {\n                                        const divId = `input-error-${attribute.name}`;\n\n                                        return (\n                                            <>\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\n                                                <span\n                                                    id={divId}\n                                                    className={getClassName(\"kcInputErrorMessageClass\")}\n                                                    style={{\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                    }}\n                                                    aria-live=\"polite\"\n                                                >\n                                                    {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                </span>\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                        </div>\n                        {AfterField && <AfterField attribute={attribute} />}\n                    </Fragment>\n                );\n            })}\n        </>\n    );\n}\n"],"names":["IdpReviewUserProfile","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","msg","msgStr","url","_useState","useState","_useState2","_slicedToArray","isFomSubmittable","setIsFomSubmittable","console","log","profileAttributesEmail","profile","attributes","filter","obj","name","profileAttributesFirstName","profileAttributesLastName","required","attributesByName","email","firstName","lastName","_jsx","headerNode","children","_jsxs","id","className","action","loginAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","clsx","type","value","disabled","BeforeField","AfterField","advancedMsg","_useFormValidation","useFormValidation","_useFormValidation$fo","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationDispatch","attributesWithPassword","useEffect","currentGroup","_Fragment","map","attribute","i","_attribute$group","group","_attribute$groupDispl","groupDisplayHeader","_attribute$groupDispl2","groupDisplayDescription","_fieldStateByAttribut","displayableErrors","formGroupClassName","length","Fragment","Object","assign","concat","htmlFor","_a","displayName","options","validators","undefined","onChange","event","target","onBlur","selected","hidden","option","readOnly","autoComplete","autocomplete","divId","style","_ref","errorMessage"],"sourceRoot":""}
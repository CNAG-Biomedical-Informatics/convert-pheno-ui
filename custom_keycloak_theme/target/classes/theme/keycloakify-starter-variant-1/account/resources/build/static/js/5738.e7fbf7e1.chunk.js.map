{"version":3,"file":"static/js/5738.e7fbf7e1.chunk.js","mappings":"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","sources":["keycloak-theme/login/pages/Login.tsx","../node_modules/oidc-spa/src/tools/urlQueryParams.ts","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js"],"sourcesContent":["import { useState, type FormEventHandler } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\nimport { retrieveQueryParamFromUrl } from \"oidc-spa/tools/urlQueryParams\";\n\nconst result = retrieveQueryParamFromUrl({\n    \"url\": window.location.href,\n    \"name\": \"my_custom_param\",\n});\n\nif (result.wasPresent) {\n    console.log(\"my_custom_param\", result.value);\n}\n\n\nexport default function Login(props: PageProps<Extract<KcContext, { pageId: \"login.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { social, realm, url, usernameHidden, login, auth, registrationDisabled } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isLoginButtonDisabled, setIsLoginButtonDisabled] = useState(false);\n\n    const onSubmit = useConstCallback<FormEventHandler<HTMLFormElement>>(e => {\n        e.preventDefault();\n\n        setIsLoginButtonDisabled(true);\n\n        const formElement = e.target as HTMLFormElement;\n\n        //NOTE: Even if we login with email Keycloak expect username and password in\n        //the POST request.\n        formElement.querySelector(\"input[name='email']\")?.setAttribute(\"name\", \"username\");\n\n        formElement.submit();\n    });\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doUseDefaultCss, classes }}\n            displayInfo={social.displayInfo}\n            displayWide={realm.password && social.providers !== undefined}\n            headerNode={msg(\"doLogIn\")}\n            infoNode={\n                realm.password &&\n                realm.registrationAllowed &&\n                !registrationDisabled && (\n                    <div id=\"kc-registration\">\n                        <span>\n                            {msg(\"noAccount\")}\n                            <a tabIndex={6} href={url.registrationUrl}>\n                                {msg(\"doRegister\")}\n                            </a>\n                        </span>\n                    </div>\n                )\n            }\n        >\n            <div id=\"kc-form\" className={clsx(realm.password && social.providers !== undefined && getClassName(\"kcContentWrapperClass\"))}>\n                <div\n                    id=\"kc-form-wrapper\"\n                    className={clsx(\n                        realm.password &&\n                        social.providers && [getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\")]\n                    )}\n                >\n                    {realm.password && (\n                        <form id=\"kc-form-login\" onSubmit={onSubmit} action={url.loginAction} method=\"post\">\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                {!usernameHidden &&\n                                    (() => {\n                                        const label = !realm.loginWithEmailAllowed\n                                            ? \"username\"\n                                            : realm.registrationEmailAsUsername\n                                                ? \"email\"\n                                                : \"usernameOrEmail\";\n\n                                        const autoCompleteHelper: typeof label = label === \"usernameOrEmail\" ? \"username\" : label;\n\n                                        return (\n                                            <>\n                                                <label htmlFor={autoCompleteHelper} className={getClassName(\"kcLabelClass\")}>\n                                                    {msg(label)}\n                                                </label>\n                                                <input\n                                                    tabIndex={1}\n                                                    id={autoCompleteHelper}\n                                                    className={getClassName(\"kcInputClass\")}\n                                                    //NOTE: This is used by Google Chrome auto fill so we use it to tell\n                                                    //the browser how to pre fill the form but before submit we put it back\n                                                    //to username because it is what keycloak expects.\n                                                    name={autoCompleteHelper}\n                                                    defaultValue={login.username ?? \"\"}\n                                                    type=\"text\"\n                                                    autoFocus={true}\n                                                    autoComplete=\"off\"\n                                                />\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                            <div className={getClassName(\"kcFormGroupClass\")}>\n                                <label htmlFor=\"password\" className={getClassName(\"kcLabelClass\")}>\n                                    {msg(\"password\")}\n                                </label>\n                                <input\n                                    tabIndex={2}\n                                    id=\"password\"\n                                    className={getClassName(\"kcInputClass\")}\n                                    name=\"password\"\n                                    type=\"password\"\n                                    autoComplete=\"off\"\n                                />\n                            </div>\n                            <div className={clsx(getClassName(\"kcFormGroupClass\"), getClassName(\"kcFormSettingClass\"))}>\n                                <div id=\"kc-form-options\">\n                                    {realm.rememberMe && !usernameHidden && (\n                                        <div className=\"checkbox\">\n                                            <label>\n                                                <input\n                                                    tabIndex={3}\n                                                    id=\"rememberMe\"\n                                                    name=\"rememberMe\"\n                                                    type=\"checkbox\"\n                                                    {...(login.rememberMe === \"on\"\n                                                        ? {\n                                                            \"checked\": true\n                                                        }\n                                                        : {})}\n                                                />\n                                                {msg(\"rememberMe\")}\n                                            </label>\n                                        </div>\n                                    )}\n                                </div>\n                                <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\n                                    {realm.resetPasswordAllowed && (\n                                        <span>\n                                            <a tabIndex={5} href={url.loginResetCredentialsUrl}>\n                                                {msg(\"doForgotPassword\")}\n                                            </a>\n                                        </span>\n                                    )}\n                                </div>\n                            </div>\n                            <div id=\"kc-form-buttons\" className={getClassName(\"kcFormGroupClass\")}>\n                                <input\n                                    type=\"hidden\"\n                                    id=\"id-hidden-input\"\n                                    name=\"credentialId\"\n                                    {...(auth?.selectedCredential !== undefined\n                                        ? {\n                                            \"value\": auth.selectedCredential\n                                        }\n                                        : {})}\n                                />\n                                <input\n                                    tabIndex={4}\n                                    className={clsx(\n                                        getClassName(\"kcButtonClass\"),\n                                        getClassName(\"kcButtonPrimaryClass\"),\n                                        getClassName(\"kcButtonBlockClass\"),\n                                        getClassName(\"kcButtonLargeClass\")\n                                    )}\n                                    name=\"login\"\n                                    id=\"kc-login\"\n                                    type=\"submit\"\n                                    value={msgStr(\"doLogIn\")}\n                                    disabled={isLoginButtonDisabled}\n                                />\n                            </div>\n                        </form>\n                    )}\n                </div>\n                {realm.password && social.providers !== undefined && (\n                    <div\n                        id=\"kc-social-providers\"\n                        className={clsx(getClassName(\"kcFormSocialAccountContentClass\"), getClassName(\"kcFormSocialAccountClass\"))}\n                    >\n                        <ul\n                            className={clsx(\n                                getClassName(\"kcFormSocialAccountListClass\"),\n                                social.providers.length > 4 && getClassName(\"kcFormSocialAccountDoubleListClass\")\n                            )}\n                        >\n                            {social.providers.map(p => (\n                                <li key={p.providerId} className={getClassName(\"kcFormSocialAccountListLinkClass\")}>\n                                    <a href={p.loginUrl} id={`zocial-${p.alias}`} className={clsx(\"zocial\", p.providerId)}>\n                                        <span>{p.displayName}</span>\n                                    </a>\n                                </li>\n                            ))}\n                        </ul>\n                    </div>\n                )}\n            </div>\n        </Template>\n    );\n}\n","export function addQueryParamToUrl(params: { url: string; name: string; value: string }): {\n    newUrl: string;\n} {\n    const { url, name, value } = params;\n\n    let newUrl = url;\n\n    const result = retrieveQueryParamFromUrl({\n        url,\n        name\n    });\n\n    if (result.wasPresent) {\n        newUrl = result.newUrl;\n    }\n\n    newUrl += `${\n        newUrl.includes(\"?\") ? \"&\" : newUrl.endsWith(\"?\") ? \"\" : \"?\"\n    }${name}=${encodeURIComponent(value)}`;\n\n    return { newUrl };\n}\n\nexport function retrieveAllQueryParamStartingWithPrefixFromUrl<\n    Prefix extends string,\n    DoLeave extends boolean\n>(params: {\n    url: string;\n    prefix: Prefix;\n    doLeavePrefixInResults: DoLeave;\n}): { newUrl: string; values: Record<DoLeave extends true ? `${Prefix}${string}` : string, string> } {\n    const { url, prefix, doLeavePrefixInResults } = params;\n\n    const [baseUrl, locationSearch = \"\"] = url.split(\"?\");\n\n    const values: Record<string, string> = {};\n\n    const { newLocationSearch } = (() => {\n        let newLocationSearch = locationSearch\n            .replace(/^\\?/, \"\")\n            .split(\"&\")\n            .map(part => part.split(\"=\") as [string, string])\n            .filter(([key, value_i]) =>\n                !key.startsWith(prefix)\n                    ? true\n                    : ((values[doLeavePrefixInResults ? key : key.substring(prefix.length)] =\n                          decodeURIComponent(value_i)),\n                      false)\n            )\n            .map(entry => entry.join(\"=\"))\n            .join(\"&\");\n        newLocationSearch = newLocationSearch === \"\" ? \"\" : `?${newLocationSearch}`;\n\n        return { newLocationSearch };\n    })();\n\n    return {\n        \"newUrl\": `${baseUrl}${newLocationSearch}`,\n        values\n    };\n}\n\nexport function retrieveQueryParamFromUrl(params: {\n    url: string;\n    name: string;\n}): { wasPresent: false } | { wasPresent: true; newUrl: string; value: string } {\n    const { url, name } = params;\n\n    const { newUrl, values } = retrieveAllQueryParamStartingWithPrefixFromUrl({\n        url,\n        \"prefix\": name,\n        \"doLeavePrefixInResults\": true\n    });\n\n    return name in values\n        ? {\n              \"wasPresent\": true,\n              newUrl,\n              \"value\": values[name]\n          }\n        : {\n              \"wasPresent\": false\n          };\n}\n","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}"],"names":["result","retrieveQueryParamFromUrl","window","location","href","Login","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","social","realm","url","usernameHidden","login","auth","registrationDisabled","msg","msgStr","_useState","useState","_useState2","_slicedToArray","isLoginButtonDisabled","setIsLoginButtonDisabled","onSubmit","useConstCallback","e","_formElement$querySel","preventDefault","formElement","target","querySelector","setAttribute","submit","_jsx","displayInfo","displayWide","password","undefined","providers","headerNode","infoNode","registrationAllowed","id","children","_jsxs","tabIndex","registrationUrl","className","clsx","action","loginAction","method","_login$username","label","loginWithEmailAllowed","registrationEmailAsUsername","autoCompleteHelper","_Fragment","htmlFor","name","defaultValue","username","type","autoFocus","autoComplete","rememberMe","_objectSpread","resetPasswordAllowed","loginResetCredentialsUrl","selectedCredential","value","disabled","length","map","p","loginUrl","concat","alias","providerId","displayName","wasPresent","console","log","retrieveAllQueryParamStartingWithPrefixFromUrl","params","prefix","doLeavePrefixInResults","_a","__read","split","baseUrl","_b","locationSearch","values","newLocationSearch","replace","part","filter","key","value_i","startsWith","substring","decodeURIComponent","entry","join","newUrl","exports","includes","endsWith","encodeURIComponent","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread2","i","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty"],"sourceRoot":""}
version: '3.3'
services:
  api:
    image: leistivo/convert-pheno-ui-server:latest
    container_name: convert-pheno-api
    # build:
    #   context: ./convertPheno_server
    #   target: prod
    #   args:
    #     - IGNORE_CACHE_FROM_HERE=${IGNORE_CACHE_FROM_HERE}
    depends_on:
      api-db:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    ports:
      - 5000:5000
    volumes:
      - api-data:/opt/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      API_DB_USER: ${API_DB_USER}
      API_DB_PW: ${API_DB_PW}
      API_DB_HOST: ${API_DB_HOST}
      API_DB_PORT: ${API_DB_PORT}
      API_DB_NAME: ${API_DB_NAME}
      KC_REALM: ${KC_REALM}
      UID: ${UID}
      GID: ${GID}
      API_SECURITY: true
    restart: unless-stopped
    # healthcheck:
    #   test: curl -f http://0.0.0.0:5000/api/curltest
    #   interval: 10s
    #   timeout: 10s
    #   retries: 5
    # tty: true

  api-db:
    image: postgres:13-alpine
    container_name: convert-pheno-api-db
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${API_DB_NAME}
      - POSTGRES_USER=${API_DB_USER}
      - POSTGRES_PASSWORD=${API_DB_PW}
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U postgres

  client:
    image: leistivo/convert-pheno-ui-client:latest
    # container_name: convert-pheno-client
    # build:
    #   context: ./convertPheno_client
    #   args:
    #     - IGNORE_CACHE_FROM_HERE=${IGNORE_CACHE_FROM_HERE}
    depends_on:
      keycloak:
        condition: service_healthy
      api:
        condition: service_healthy
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx_mountpoint/templates:/etc/nginx/templates:ro
      - ./nginx_mountpoint/includes:/etc/nginx/includes:ro
      - ./nginx_mountpoint/certs/${DOMAIN}.pem:/etc/nginx/${DOMAIN}.pem:ro
      - ./nginx_mountpoint/certs/${DOMAIN}-key.pem:/etc/nginx/${DOMAIN}-key.pem:ro
      - ./nginx_mountpoint/replace_env_vars.sh:/docker-entrypoint.d/replace_env_vars.sh
    user: root
    environment:
      NODE_ENV: production
      VITE_SECURITY: true
      VITE_API_URL: https://${DOMAIN}/
      VITE_KC_CONFIG: ${KC_CONFIG}
    restart: unless-stopped
    healthcheck:
      test: curl -kf https://0.0.0.0:443
      interval: 10s
      timeout: 10s
      retries: 5

  keycloak-db:
    image: postgres:13-alpine
    container_name: kc-db
    environment:
      POSTGRES_DB: ${KC_DB}
      POSTGRES_USER: ${KC_DB_USER}
      POSTGRES_PASSWORD: ${KC_DB_PW}
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U ${KC_DB_USER}

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:20.0.1
    depends_on:
      - keycloak-db
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: ${KC_DB_USER}
      DB_PASSWORD: ${KC_DB_PW}
      KEYCLOAK_ADMIN: ${KC_ADMIN_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PW}
      KC_PROXY: edge
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_PATH: /auth
      KC_HOSTNAME_URL: https://${DOMAIN}/auth/
      KC_HOSTNAME_ADMIN_URL: https://${DOMAIN}/auth/
      KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/conf/server.crt.pem
      KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/conf/server.key.pem
      KC_HEALTH_ENABLED: true
    volumes:
      - type: bind
        source: ./realm-export.json
        target: /opt/keycloak/data/import/realm-export.json
      - type: bind
        source: ./nginx_mountpoint/certs/${DOMAIN}.pem
        target: /opt/keycloak/conf/server.crt.pem
        read_only: true
      - type: bind
        source: ./nginx_mountpoint/certs/${DOMAIN}-key.pem
        target: /opt/keycloak/conf/server.key.pem
        read_only: true
    restart: unless-stopped
    command: ${KC_CMD}
    healthcheck:
      test: curl localhost:8080/health | grep -q "UP"
      interval: 10s
      timeout: 10s
      retries: 5

  convert-pheno:
    user: ${UID}
    image: manuelrueda/convert-pheno:latest
    container_name: convert-pheno
    restart: unless-stopped
    tty: true
    volumes:
      - api-data:/home

  sonarqube:
    image: sonarqube:9.9.1-community
    ports:
      - "9000:9000"
      - "9092:9092"

volumes:
  postgres-data:
  api-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data
      o: bind

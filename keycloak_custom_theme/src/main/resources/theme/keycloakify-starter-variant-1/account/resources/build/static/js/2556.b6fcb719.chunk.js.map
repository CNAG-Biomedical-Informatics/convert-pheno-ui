{"version":3,"file":"static/js/2556.b6fcb719.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/account/lib/useGetClassName.ts","../node_modules/keycloakify/src/account/pages/Password.tsx","../node_modules/keycloakify/src/lib/useGetClassName.ts","../node_modules/keycloakify/src/tools/clsx.ts","../node_modules/tsafe/src/typeGuard.ts"],"sourcesContent":["import { createUseClassName } from \"keycloakify/lib/useGetClassName\";\nimport type { ClassKey } from \"keycloakify/account/TemplateProps\";\n\nexport const { useGetClassName } = createUseClassName<ClassKey>({\n    \"defaultClasses\": {\n        \"kcHtmlClass\": undefined,\n        \"kcBodyClass\": undefined,\n        \"kcButtonClass\": \"btn\",\n        \"kcButtonPrimaryClass\": \"btn-primary\",\n        \"kcButtonLargeClass\": \"btn-lg\",\n        \"kcButtonDefaultClass\": \"btn-default\"\n    }\n});\n","import { useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport type { PageProps } from \"keycloakify/account/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/account/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function Password(props: PageProps<Extract<KcContext, { pageId: \"password.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        \"classes\": {\n            ...classes,\n            \"kcBodyClass\": clsx(classes?.kcBodyClass, \"password\")\n        }\n    });\n\n    const { url, password, account, stateChecker } = kcContext;\n\n    const { msgStr, msg } = i18n;\n\n    const [currentPassword, setCurrentPassword] = useState(\"\");\n    const [newPassword, setNewPassword] = useState(\"\");\n    const [newPasswordConfirm, setNewPasswordConfirm] = useState(\"\");\n    const [newPasswordError, setNewPasswordError] = useState(\"\");\n    const [newPasswordConfirmError, setNewPasswordConfirmError] = useState(\"\");\n    const [hasNewPasswordBlurred, setHasNewPasswordBlurred] = useState(false);\n    const [hasNewPasswordConfirmBlurred, setHasNewPasswordConfirmBlurred] = useState(false);\n\n    const checkNewPassword = (newPassword: string) => {\n        if (!password.passwordSet) {\n            return;\n        }\n\n        if (newPassword === currentPassword) {\n            setNewPasswordError(msgStr(\"newPasswordSameAsOld\"));\n        } else {\n            setNewPasswordError(\"\");\n        }\n    };\n\n    const checkNewPasswordConfirm = (newPasswordConfirm: string) => {\n        if (newPasswordConfirm === \"\") {\n            return;\n        }\n\n        if (newPassword !== newPasswordConfirm) {\n            setNewPasswordConfirmError(msgStr(\"passwordConfirmNotMatch\"));\n        } else {\n            setNewPasswordConfirmError(\"\");\n        }\n    };\n\n    return (\n        <Template\n            {...{\n                kcContext: {\n                    ...kcContext,\n                    \"message\": (() => {\n                        if (newPasswordError !== \"\") {\n                            return {\n                                \"type\": \"error\",\n                                \"summary\": newPasswordError\n                            };\n                        }\n\n                        if (newPasswordConfirmError !== \"\") {\n                            return {\n                                \"type\": \"error\",\n                                \"summary\": newPasswordConfirmError\n                            };\n                        }\n\n                        return kcContext.message;\n                    })()\n                },\n                i18n,\n                doUseDefaultCss,\n                classes\n            }}\n            active=\"password\"\n        >\n            <div className=\"row\">\n                <div className=\"col-md-10\">\n                    <h2>{msg(\"changePasswordHtmlTitle\")}</h2>\n                </div>\n                <div className=\"col-md-2 subtitle\">\n                    <span className=\"subtitle\">{msg(\"allFieldsRequired\")}</span>\n                </div>\n            </div>\n\n            <form action={url.passwordUrl} className=\"form-horizontal\" method=\"post\">\n                <input\n                    type=\"text\"\n                    id=\"username\"\n                    name=\"username\"\n                    value={account.username ?? \"\"}\n                    autoComplete=\"username\"\n                    readOnly\n                    style={{ \"display\": \"none\" }}\n                />\n\n                {password.passwordSet && (\n                    <div className=\"form-group\">\n                        <div className=\"col-sm-2 col-md-2\">\n                            <label htmlFor=\"password\" className=\"control-label\">\n                                {msg(\"password\")}\n                            </label>\n                        </div>\n                        <div className=\"col-sm-10 col-md-10\">\n                            <input\n                                type=\"password\"\n                                className=\"form-control\"\n                                id=\"password\"\n                                name=\"password\"\n                                autoFocus\n                                autoComplete=\"current-password\"\n                                value={currentPassword}\n                                onChange={event => setCurrentPassword(event.target.value)}\n                            />\n                        </div>\n                    </div>\n                )}\n\n                <input type=\"hidden\" id=\"stateChecker\" name=\"stateChecker\" value={stateChecker} />\n\n                <div className=\"form-group\">\n                    <div className=\"col-sm-2 col-md-2\">\n                        <label htmlFor=\"password-new\" className=\"control-label\">\n                            {msg(\"passwordNew\")}\n                        </label>\n                    </div>\n                    <div className=\"col-sm-10 col-md-10\">\n                        <input\n                            type=\"password\"\n                            className=\"form-control\"\n                            id=\"password-new\"\n                            name=\"password-new\"\n                            autoComplete=\"new-password\"\n                            value={newPassword}\n                            onChange={event => {\n                                const newPassword = event.target.value;\n\n                                setNewPassword(newPassword);\n                                if (hasNewPasswordBlurred) {\n                                    checkNewPassword(newPassword);\n                                }\n                            }}\n                            onBlur={() => {\n                                setHasNewPasswordBlurred(true);\n                                checkNewPassword(newPassword);\n                            }}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"form-group\">\n                    <div className=\"col-sm-2 col-md-2\">\n                        <label htmlFor=\"password-confirm\" className=\"control-label two-lines\">\n                            {msg(\"passwordConfirm\")}\n                        </label>\n                    </div>\n\n                    <div className=\"col-sm-10 col-md-10\">\n                        <input\n                            type=\"password\"\n                            className=\"form-control\"\n                            id=\"password-confirm\"\n                            name=\"password-confirm\"\n                            autoComplete=\"new-password\"\n                            value={newPasswordConfirm}\n                            onChange={event => {\n                                const newPasswordConfirm = event.target.value;\n\n                                setNewPasswordConfirm(newPasswordConfirm);\n                                if (hasNewPasswordConfirmBlurred) {\n                                    checkNewPasswordConfirm(newPasswordConfirm);\n                                }\n                            }}\n                            onBlur={() => {\n                                setHasNewPasswordConfirmBlurred(true);\n                                checkNewPasswordConfirm(newPasswordConfirm);\n                            }}\n                        />\n                    </div>\n                </div>\n\n                <div className=\"form-group\">\n                    <div id=\"kc-form-buttons\" className=\"col-md-offset-2 col-md-10 submit\">\n                        <div>\n                            <button\n                                disabled={newPasswordError !== \"\" || newPasswordConfirmError !== \"\"}\n                                type=\"submit\"\n                                className={clsx(\n                                    getClassName(\"kcButtonClass\"),\n                                    getClassName(\"kcButtonPrimaryClass\"),\n                                    getClassName(\"kcButtonLargeClass\")\n                                )}\n                                name=\"submitAction\"\n                                value=\"Save\"\n                            >\n                                {msg(\"doSave\")}\n                            </button>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import { clsx } from \"keycloakify/tools/clsx\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\n\nexport function createUseClassName<ClassKey extends string>(params: { defaultClasses: Record<ClassKey, string | undefined> }) {\n    const { defaultClasses } = params;\n\n    function useGetClassName(params: { doUseDefaultCss: boolean; classes: Partial<Record<ClassKey, string>> | undefined }) {\n        const { classes } = params;\n\n        const getClassName = useConstCallback((classKey: ClassKey): string => {\n            return clsx(classKey, defaultClasses[classKey], classes?.[classKey]);\n        });\n\n        return { getClassName };\n    }\n\n    return { useGetClassName };\n}\n","import { assert } from \"tsafe/assert\";\nimport { typeGuard } from \"tsafe/typeGuard\";\n\nexport type CxArg = undefined | null | string | boolean | Partial<Record<string, boolean | null | undefined>> | readonly CxArg[];\n\nexport const clsx = (...args: CxArg[]): string => {\n    const len = args.length;\n    let i = 0;\n    let cls = \"\";\n    for (; i < len; i++) {\n        const arg = args[i];\n        if (arg == null) continue;\n\n        let toAdd;\n        switch (typeof arg) {\n            case \"boolean\":\n                break;\n            case \"object\": {\n                if (Array.isArray(arg)) {\n                    toAdd = clsx(...arg);\n                } else {\n                    assert(!typeGuard<{ length: number }>(arg, false));\n\n                    toAdd = \"\";\n                    for (const k in arg) {\n                        if (arg[k as string] && k) {\n                            toAdd && (toAdd += \" \");\n                            toAdd += k;\n                        }\n                    }\n                }\n                break;\n            }\n            default: {\n                toAdd = arg;\n            }\n        }\n        if (toAdd) {\n            cls && (cls += \" \");\n            cls += toAdd;\n        }\n    }\n    return cls;\n};\n","/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/** https://docs.tsafe.dev/typeguard */\nexport function typeGuard<T>(_value: any, isMatched: boolean): _value is T {\n    return isMatched;\n}\n"],"names":["useGetClassName","createUseClassName","undefined","Password","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","Object","assign","clsx","kcBodyClass","url","password","account","stateChecker","msgStr","msg","_useState","useState","_useState2","_slicedToArray","currentPassword","setCurrentPassword","_useState3","_useState4","newPassword","setNewPassword","_useState5","_useState6","newPasswordConfirm","setNewPasswordConfirm","_useState7","_useState8","newPasswordError","setNewPasswordError","_useState9","_useState10","newPasswordConfirmError","setNewPasswordConfirmError","_useState11","_useState12","hasNewPasswordBlurred","setHasNewPasswordBlurred","_useState13","_useState14","hasNewPasswordConfirmBlurred","setHasNewPasswordConfirmBlurred","checkNewPassword","passwordSet","checkNewPasswordConfirm","_jsxs","message","active","children","className","_jsx","action","passwordUrl","method","type","id","name","value","_a","username","autoComplete","readOnly","style","htmlFor","autoFocus","onChange","event","target","onBlur","disabled","params","defaultClasses","useConstCallback","classKey","len","arguments","length","i","cls","arg","toAdd","Array","isArray","apply","_toConsumableArray","k","assert","typeGuard","_value","isMatched"],"sourceRoot":""}
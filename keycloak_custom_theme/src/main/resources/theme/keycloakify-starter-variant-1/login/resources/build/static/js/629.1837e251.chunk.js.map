{"version":3,"file":"static/js/629.1837e251.chunk.js","mappings":"sLAGM,SAAUA,EAA4CC,GACxD,IAAQC,EAAmBD,EAAnBC,eAYR,MAAO,CAAEC,gBAVT,SAAyBF,GACrB,IAAQG,EAAYH,EAAZG,QAMR,MAAO,CAAEC,cAJYC,EAAAA,EAAAA,IAAiB,SAACC,GACnC,OAAOC,EAAAA,EAAAA,GAAKD,EAAUL,EAAeK,GAAkB,OAAPH,QAAO,IAAPA,OAAO,EAAPA,EAAUG,GAC9D,IAGJ,EAGJ,C,wICjBaE,EACT,yJCaE,SAAUC,EAAkBT,GAa9B,IAAQU,EAA6CV,EAA7CU,UAASC,EAAoCX,EAAlCY,mBAAAA,OAAkB,IAAAD,EAAG,CAAC,EAACA,EAAEE,EAASb,EAATa,KAEtCC,GAAyBC,EAAAA,EAAAA,UAC3B,kBACKL,EAAUM,iBAEJ,WACG,IAAMC,EAAOP,EAAUQ,MAAMC,4BAA8B,QAAU,WAErE,OAAOT,EAAUU,QAAQC,WAAWC,QAChC,SAACC,EAAMC,GAAI,SAAAC,QAAAC,EAAAA,EAAAA,GACJH,IAAIG,EAAAA,EAAAA,GACHF,EAAKP,OAASA,EACZ,CAACO,GACD,CACIA,GACAG,EAAAA,EAAAA,IAAc,CACV,KAAQ,WACR,aAAeA,EAAAA,EAAAA,IAAwB,eACvC,UAAY,EACZ,UAAY,EACZ,WAAcf,EACd,YAAe,CAAC,EAChB,iBAAoB,CAAC,EACrB,aAAgB,kBAEpBe,EAAAA,EAAAA,IAAc,CACV,KAAQ,mBACR,aAAeA,EAAAA,EAAAA,IAAwB,sBACvC,UAAY,EACZ,UAAY,EACZ,WAAc,CACV,gBAAmB,CACf,KAAQ,WACR,sBAAsB,EACtB,SAAY,QACZ,iBAAiBA,EAAAA,EAAAA,IAAwB,sCAGjD,YAAe,CAAC,EAChB,iBAAoB,CAAC,EACrB,aAAgB,mBAEvB,GAEX,GAER,CAzCC,GADDjB,EAAUU,QAAQC,UA0Cd,GACd,CAACX,EAAWE,IAGhBgB,EAoGJ,SAAsB5B,GASlB,IAAQU,EAAoBV,EAApBU,UAAWG,EAASb,EAATa,KAGfgB,EAEAnB,EAFAmB,iBACWR,EACXX,EADAU,QAAWC,WAGPS,EAA6CjB,EAA7CiB,IAAKC,EAAwClB,EAAxCkB,OAAQC,EAAgCnB,EAAhCmB,YAAaC,EAAmBpB,EAAnBoB,eAE5BC,GAAY7B,EAAAA,EAAAA,IAAiB,SAACL,G,MACxBiB,EAAoCjB,EAApCiB,KAAMkB,EAA8BnC,EAA9BmC,0BAENC,EAAUD,EAA0BlB,GAApCmB,MAERC,EAA4ChB,EAAWiB,MAAK,SAAAC,GAAS,OAAIA,EAAUtB,OAASA,CAAI,IAAjFuB,EAAYH,EAAnBD,MAAqBK,EAAUJ,EAAVI,WAE7BC,EACI,IAAiB,OAAZF,QAAY,IAAZA,EAAAA,EAAgB,MAAQJ,EAA7B,CAIA,IAAIO,EAEJ,IACIA,EAAiBd,EAAiBe,YAAY3B,E,CAChD,MAAA4B,IACE,MAAMH,C,CAGV,GAAKC,EAAL,CAIA,IAAMG,EAAkBjB,EAAiBkB,IAAI9B,GAE7C,MAAO,CACH,CACI,mBAAiB+B,EACjBF,gBAAAA,EACA,cAAgBG,EAAAA,EAAAA,KAAA,QAAAC,SAAeJ,GAAJ,I,EAKvC,IAAMK,EAIA,GAGIC,EAAgB,SAEhBC,EAAYZ,EAAWW,GAE7B,QAAkBJ,IAAdK,EAAJ,CAIA,IAAAC,EAAqED,EAA7D,sBAAsBE,OAAgB,IAAAD,GAAQA,EAAEE,EAAaH,EAAbG,IAAKC,EAAQJ,EAARI,IAE7D,IAAIF,GAA8B,KAAVnB,EAAxB,CAIA,QAAYY,IAARQ,GAAqBpB,EAAMsB,OAASC,SAASH,GAAM,CACnD,IAAMI,EAAU,CAAC,gCAAiCJ,GAElDL,EAAOU,KAAK,CACR,cAAgBZ,EAAAA,EAAAA,KAACa,EAAAA,SAAQ,CAAAZ,SAAsBpB,EAAGiC,WAAC,EAAGH,IAAvBT,EAAOO,QACtC,gBAAmB3B,EAAMgC,WAAC,EAAGH,GAC7BR,cAAAA,G,CAIR,QAAYJ,IAARS,GAAqBrB,EAAMsB,OAASC,SAASF,GAAM,CACnD,IAAMG,EAAU,CAAC,iCAAkCH,GAEnDN,EAAOU,KAAK,CACR,cAAgBZ,EAAAA,EAAAA,KAACa,EAAAA,SAAQ,CAAAZ,SAAsBpB,EAAGiC,WAAC,EAAGH,IAAvBT,EAAOO,QACtC,gBAAmB3B,EAAMgC,WAAC,EAAGH,GAC7BR,cAAAA,G,GAMR,IAAMA,EAAgB,kBAEhBC,EAAYZ,EAAWW,GAE7B,QAAkBJ,IAAdK,EAAJ,CAIA,IAAAW,EAAwHX,EAAhH,sBAAsBE,OAAgB,IAAAS,GAAQA,EAAQC,EAA0DZ,EAAhEpC,KAAiBiD,EAA+Cb,EAA/Ca,SAA2BC,EAAoBd,EAArC,iBAEnF,IAAIE,GAA8B,KAAVnB,EAAxB,CAIA,IAAegC,EAAejC,EAA0B8B,GAAhD7B,MAWR,IATiB,WACb,OAAQ8B,GACJ,IAAK,YACD,OAAOE,IAAehC,EAC1B,IAAK,QACD,OAAOgC,IAAehC,EAElC,CAPiB,GASjB,CAIA,IAAMiC,EAAS,CACI,OAAfF,QAAe,IAAfA,EAAAA,GACIxC,EAAAA,EAAAA,IACK,WACG,OAAQuC,GACJ,IAAK,QACD,MAAO,gBACX,IAAK,YACD,MAAO,oBAEnB,CAPC,IASTD,EACAhD,EACAiD,GAGJf,EAAOU,KAAK,CACRT,cAAAA,EACA,cAAgBH,EAAAA,EAAAA,KAACa,EAAAA,SAAQ,CAAAZ,SAAsBlB,EAAW+B,WAAC,EAAGM,IAA/BlB,EAAOO,QACtC,gBAAmBzB,EAAc8B,WAAC,EAAGM,I,GAKzC,IAAMjB,EAAgB,UAEhBC,EAAYZ,EAAWW,GAE7B,QAAkBJ,IAAdK,EAAJ,CAIA,IAAAiB,EAAsGjB,EAA9F,sBAAsBE,OAAgB,IAAAe,GAAQA,EAAEC,EAA8ClB,EAA9CkB,QAA0BJ,EAAoBd,EAArC,iBAEjE,KAAIE,GAA8B,KAAVnB,KAIpB,IAAIoC,OAAOD,GAASE,KAAKrC,GAA7B,CAIA,IAAMwB,EAAU,CAAgB,OAAfO,QAAe,IAAfA,EAAAA,GAAmBxC,EAAAA,EAAAA,IAAe,sBAAuB4C,GAE1EpB,EAAOU,KAAK,CACRT,cAAAA,EACA,cAAgBH,EAAAA,EAAAA,KAACa,EAAAA,SAAQ,CAAAZ,SAAsBlB,EAAW+B,WAAC,EAAGH,IAA/BT,EAAOO,QACtC,gBAAmBzB,EAAc8B,WAAC,EAAGH,I,EAKzC,GAAgD,aAApB,QAAxBc,EAAA,GAAAjD,OAAI0B,GAAQwB,UAAU,UAAE,IAAAD,OAAA,EAAAA,EAAEtB,eAA9B,CAIA,IAAMA,EAAgB,QAEhBC,EAAYZ,EAAWW,GAE7B,QAAkBJ,IAAdK,EAAJ,CAIA,IAAAuB,EAA2DvB,EAAnD,sBAER,WAF8C,IAAAuB,GAAQA,IAEpB,KAAVxC,KAIpB5B,EAAYiE,KAAKrC,GAArB,CAIA,IAAMwB,EAAU,EAACjC,EAAAA,EAAAA,IAAe,wBAEhCwB,EAAOU,KAAK,CACRT,cAAAA,EACA,cAAgBH,EAAAA,EAAAA,KAACa,EAAAA,SAAQ,CAAAZ,SAAsBpB,EAAGiC,WAAC,EAAGH,IAAvBT,EAAOO,QACtC,gBAAmB3B,EAAMgC,WAAC,EAAGH,I,GAKjC,IAAMR,EAAgB,UAEhBC,EAAYZ,EAAWW,GAE7B,QAAkBJ,IAAdK,EAAJ,CAIA,IAAAwB,EAAqExB,EAA7D,sBAAsBE,OAAgB,IAAAsB,GAAQA,EAAErB,EAAaH,EAAbG,IAAKC,GAAQJ,EAARI,IAE7D,IAAIF,GAA8B,KAAVnB,EAAxB,CAIA,IAAM0C,GAAWnB,SAASvB,GAE1B,GAAI2C,MAAMD,IAAV,CACI,IAAMlB,GAAU,CAAC,mBAEjBT,EAAOU,KAAK,CACRT,cAAAA,EACA,cAAgBH,EAAAA,EAAAA,KAACa,EAAAA,SAAQ,CAAAZ,SAAsBpB,EAAGiC,WAAC,EAAGH,KAAvBT,EAAOO,QACtC,gBAAmB3B,EAAMgC,WAAC,EAAGH,K,MAMrC,QAAYZ,IAARQ,GAAqBsB,GAAWnB,SAASH,GAA7C,CACI,IAAMI,GAAU,CAAC,oCAAqCJ,GAEtDL,EAAOU,KAAK,CACRT,cAAAA,EACA,cAAgBH,EAAAA,EAAAA,KAACa,EAAAA,SAAQ,CAAAZ,SAAsBpB,EAAGiC,WAAC,EAAGH,KAAvBT,EAAOO,QACtC,gBAAmB3B,EAAMgC,WAAC,EAAGH,K,MAMrC,QAAYZ,IAARS,IAAqBqB,GAAWnB,SAASF,IAA7C,CACI,IAAMG,GAAU,CAAC,sCAAuCH,IAExDN,EAAOU,KAAK,CACRT,cAAAA,EACA,cAAgBH,EAAAA,EAAAA,KAACa,EAAAA,SAAQ,CAAAZ,SAAsBpB,EAAGiC,WAAC,EAAGH,KAAvBT,EAAOO,QACtC,gBAAmB3B,EAAMgC,WAAC,EAAGH,K,QAQrC,IAAMR,GAAgB,UAEhBC,GAAYZ,EAAWW,IAE7B,QAAkBJ,IAAdK,IAIU,KAAVjB,KAIAiB,GAAU2B,QAAQC,QAAQ7C,IAAU,GAAxC,CAIA,IAAMwB,GAAU,EAACjC,EAAAA,EAAAA,IAAe,oBAEhCwB,EAAOU,KAAK,CACRT,cAAAA,GACA,cAAgBH,EAAAA,EAAAA,KAACa,EAAAA,SAAQ,CAAAZ,SAAsBlB,EAAW+B,WAAC,EAAGH,KAA/BT,EAAOO,QACtC,gBAAmBzB,EAAc8B,WAAC,EAAGH,K,CAM7C,OAAOT,CACX,IAEA,MAAO,CAAEjB,UAAAA,EACb,CA3Y0BgD,CAAa,CAC/B,UAAa,CACT,iBAAoBxE,EAAUmB,iBAC9B,QAAW,CACP,WAAcf,IAGtBD,KAAAA,IAPIqB,EAASN,EAATM,UAUFiD,GAAuBpE,EAAAA,EAAAA,UACzB,kBACIqE,OAAOC,YACHvE,EACKwE,KAAI,SAAA/C,GAAS,MAAK,CACfA,UAAAA,EACA,OAAUL,EAAU,CAChB,KAAQK,EAAUtB,KAClB,0BAA6BmE,OAAOC,YAChCvE,EAAuBwE,KAAI,SAAAC,GAAA,IAAGtE,EAAIsE,EAAJtE,KAAMmB,EAAKmD,EAALnD,MAAK,MAAO,CAACnB,EAAM,CAAE,MAAc,OAALmB,QAAK,IAALA,EAAAA,EAAS,IAAK,OAG3F,IACAkD,KAAI,SAAAE,GAA0B,I,EAAvBjD,EAASiD,EAATjD,UAAWY,EAAMqC,EAANrC,OAAa,OAC5BZ,EAAUtB,KACV,CACI,MAAwB,QAAfyD,EAAAnC,EAAUH,aAAK,IAAAsC,EAAAA,EAAI,GAC5BvB,OAAAA,EACA,gCAAqD,IAAlBA,EAAOO,Q,IAGzD,GACL,CAAC5C,IAKL2E,GAA8DC,EAAAA,EAAAA,aAC1D,SACIC,EACA3F,GASO,OACSoF,OAAAQ,OAAAR,OAAAQ,OAAC,CAAC,EACfD,IAAKE,EAAAA,EAAAA,GAAA,GACP7F,EAAOiB,KAAKmE,OAAAQ,OAAAR,OAAAQ,OAAA,GACND,EAAM3F,EAAOiB,OACZ,WACA,OAAQjB,EAAO8F,QACX,IAAK,aACD,MAAO,CAAE,iCAAmC,GAChD,IAAK,eACD,MAAO,CACH,MAAS9F,EAAO+F,SAChB,OAAU7D,EAAU,CAChB,KAAQlC,EAAOiB,KACf,0BAA2BmE,OAAAQ,OAAAR,OAAAQ,OAAA,GACpBD,IAAKE,EAAAA,EAAAA,GAAA,GACP7F,EAAOiB,KAAO,CAAE,MAASjB,EAAO+F,eAKzD,CAhBI,KAgBA,GAGZZ,GACHa,GAAAC,EAAAA,EAAAA,GAAAR,EAAA,GArCMS,EAA2BF,EAAA,GAAEG,EAAsBH,EAAA,GAuD1D,MAAO,CACHI,qBAjBwBrF,EAAAA,EAAAA,UACxB,iBAAO,CACH,0BAA6BqE,OAAOC,YAChCD,OAAOiB,QAAQH,GAA6BZ,KAAI,SAAAgB,GAAA,IAAAC,GAAAN,EAAAA,EAAAA,GAAAK,EAAA,GAAErF,EAAIsF,EAAA,GAAAC,EAAAD,EAAA,GAAInE,EAAKoE,EAALpE,MAAOe,EAAMqD,EAANrD,OAAuC,MAAQ,CAC5GlC,EACA,CAAEmB,MAAAA,EAAO,kBAF2FoE,EAA/BC,gCAELtD,EAAS,IAC5E,KAEL,kBAAqBiC,OAAOiB,QAAQH,GAA6BQ,OAC7D,SAAAC,GAAA,IAAAC,GAAAX,EAAAA,EAAAA,GAAAU,EAAA,GAAE1F,EAAI2F,EAAA,GAAAC,EAAAD,EAAA,GAAIxE,EAAKyE,EAALzE,MAAa,OACD,IADCyE,EAAN1D,OACNO,SAA2B,KAAVtB,IAAiBtB,EAAuBwB,MAAK,SAAAC,GAAS,OAAIA,EAAUtB,OAASA,CAAI,IAAG6F,SAAS,IAEhI,GACD,CAACZ,EAA6BpF,IAK9BqF,uBAAAA,EACArF,uBAAAA,EAER,C,2DC5KeZ,GAAoBH,E,QAAAA,GAA6B,CAC5D,eAAkB,CACd,iBAAeiD,EACf,YAAe,WACf,aAAgB,gBAChB,sBAAyB,MACzB,cAAiB,uBACjB,0BAAwBA,EACxB,gBAAmB,UACnB,uBAA0B,oBAC1B,yBAA4B,0BAC5B,gCAAmC,qBACnC,kBAAqB,kBACrB,0BAAwBA,EACxB,oBAAuB,+BACvB,sBAAyB,mCACzB,sBAAyB,mBACzB,mBAAsB,qBACtB,gBAAmB,4BACnB,iBAAoB,aACpB,oBAAuB,0CACvB,cAAiB,kBACjB,4BAA0BA,EAE1B,YAAe,iBACf,iBAAoB,kBACpB,eAAkB,6EAClB,oBAAuB,YACvB,cAAiB,qBACjB,sBAAyB,+BAEzB,gBAAmB,8EACnB,6BAAgC,oDAChC,mCAAsC,6BACtC,iCAAoC,uBACpC,kBAAqB,oBACrB,sBAAyB,oBAEzB,YAAe,kBACf,sBAAyB,YACzB,aAAgB,gBAChB,aAAgB,eAChB,yBAA4B,8DAC5B,oBAAuB,0CACvB,+BAA6BA,EAC7B,mBAAsB,0CACtB,mBAAsB,0CACtB,mBAAsB,oBACtB,gBAAmB,eAEnB,gBAAmB,+CAGnB,kBAAqB,mBAGrB,cAAiB,MAEjB,qBAAwB,cACxB,qBAAwB,cAExB,mBAAsB,SACtB,mBAAsB,YAGtB,kBAAqB,WAGrB,cAAiB,UAGjB,sBAAyB,0BACzB,0BAA6B,uCAC7B,8BAAiC,6BACjC,sCAAyC,wCACzC,8BAAiC,wCACjC,0BAA6B,4BAC7B,8BAAiC,yBACjC,8BAAiC,oBACjC,8BAAiC,oBACjC,qCAAwC,2BACxC,iCAAoC,0BACpC,kCAAqC,uBAGrC,4BAA+B,0BAC/B,6BAAgC,oCAChC,wBAA2B,oCAC3B,6BAAgC,iCAChC,yCAA4C,iCAG5C,qBAAwB,sEACxB,yBAA4B,mCAC5B,8BAAiC,mCACjC,4BAA+B,4BAC/B,+BAA6BA,KAhGtB9C,e,kBCHV6G,MAAMC,UAAUN,QACjBK,MAAMC,UAAUN,MAAQ,SAAUO,EAAiBC,GAE/C,IAAIC,EAAGC,EAEP,GAAY,MAARC,KACA,MAAM,IAAIC,UAAU,+BAKxB,IAAIC,EAAInC,OAAOiC,MAKXG,EAAMD,EAAE7D,SAAW,EAGvB,GAA0B,oBAAfuD,GAA4E,sBAA/C7B,OAAO4B,UAAUS,SAASC,KAAKT,GACnE,MAAM,IAAIK,UAYd,IARIK,UAAUjE,OAAS,IACnByD,EAAID,GAIRE,EAAI,EAGGA,EAAII,GAAK,CACZ,IAAII,EAQJ,GAAIR,KAAKG,EAcL,GAVAK,EAASL,EAAEH,KAMPD,EAAgBF,EAAWS,KAAKP,EAAGS,EAAQR,EAAGG,GAChCN,EAAWW,EAAQR,EAAGG,IAIpC,OAAO,EAGfH,G,CAEJ,OAAO,CACX,E,yFCzDS7G,EAAO,SAAPA,IAIT,IAHA,IAAMiH,EAAMG,UAAKjE,OACbmE,EAAI,EACJC,EAAM,GACHD,EAAIL,EAAKK,IAAK,CACjB,IAAME,EAAWF,EAAC,GAAAF,UAAAjE,QAADmE,OAAC7E,EAAA2E,UAADE,GACjB,GAAW,MAAPE,EAAJ,CAEA,IAAIC,OAAK,EACT,cAAeD,GACX,IAAK,UACD,MACJ,IAAK,SACD,GAAIhB,MAAMkB,QAAQF,GACdC,EAAQzH,EAAIwD,WAAC,GAADrC,EAAAA,EAAAA,GAAIqG,SAKhB,IAAK,IAAMX,KAHXc,EAAAA,EAAAA,KAAQC,EAAAA,EAAAA,GAA8BJ,GAAK,IAE3CC,EAAQ,GACQD,EACRA,EAAIX,IAAgBA,IACpBY,IAAUA,GAAS,KACnBA,GAASZ,GAIrB,MAEJ,QACIY,EAAQD,EAGZC,IACAF,IAAQA,GAAO,KACfA,GAAOE,EA5Bc,C,CA+B7B,OAAOF,CACX,C,qECzCe,SAASM,EAAeL,GACrC,IAAIM,ECFS,SAAsBC,EAAOC,GAC1C,GAAuB,YAAnB,OAAQD,IAAiC,OAAVA,EAAgB,OAAOA,EAC1D,IAAIE,EAAOF,EAAMG,OAAOC,aACxB,QAAa1F,IAATwF,EAAoB,CACtB,IAAIG,EAAMH,EAAKd,KAAKY,EAAOC,GAAQ,WACnC,GAAqB,YAAjB,OAAQI,GAAmB,OAAOA,EACtC,MAAM,IAAIrB,UAAU,+CACtB,CACA,OAAiB,WAATiB,EAAoBK,OAASC,QAAQP,EAC/C,CDPY,CAAYP,EAAK,UAC3B,MAAwB,YAAjB,OAAQM,GAAoBA,EAAMO,OAAOP,EAClD,CEJe,SAASxC,EAAgBiD,EAAKT,EAAKjG,GAYhD,OAXAiG,EAAM,EAAcA,MACTS,EACT1D,OAAO2D,eAAeD,EAAKT,EAAK,CAC9BjG,MAAOA,EACP4G,YAAY,EACZC,cAAc,EACdC,UAAU,IAGZJ,EAAIT,GAAOjG,EAEN0G,CACT,C,uBCVM,SAAUX,EAAagB,EAAaC,GACtC,OAAOA,CACX,C","sources":["../node_modules/keycloakify/src/lib/useGetClassName.ts","../node_modules/keycloakify/src/tools/emailRegExp.ts","../node_modules/keycloakify/src/login/lib/useFormValidation.tsx","../node_modules/keycloakify/src/login/lib/useGetClassName.ts","../node_modules/keycloakify/src/tools/Array.prototype.every.ts","../node_modules/keycloakify/src/tools/clsx.ts","../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/tsafe/src/typeGuard.ts"],"sourcesContent":["import { clsx } from \"keycloakify/tools/clsx\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\n\nexport function createUseClassName<ClassKey extends string>(params: { defaultClasses: Record<ClassKey, string | undefined> }) {\n    const { defaultClasses } = params;\n\n    function useGetClassName(params: { doUseDefaultCss: boolean; classes: Partial<Record<ClassKey, string>> | undefined }) {\n        const { classes } = params;\n\n        const getClassName = useConstCallback((classKey: ClassKey): string => {\n            return clsx(classKey, defaultClasses[classKey], classes?.[classKey]);\n        });\n\n        return { getClassName };\n    }\n\n    return { useGetClassName };\n}\n","export const emailRegexp =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n","import \"keycloakify/tools/Array.prototype.every\";\nimport { useMemo, useReducer, Fragment } from \"react\";\nimport { id } from \"tsafe/id\";\nimport type { MessageKey } from \"keycloakify/login/i18n/i18n\";\nimport type { Attribute, Validators } from \"keycloakify/login/kcContext/KcContext\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\nimport { emailRegexp } from \"keycloakify/tools/emailRegExp\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\n/**\n * NOTE: The attributesWithPassword returned is actually augmented with\n * artificial password related attributes only if kcContext.passwordRequired === true\n */\nexport function useFormValidation(params: {\n    kcContext: {\n        messagesPerField: Pick<KcContext.Common[\"messagesPerField\"], \"existsError\" | \"get\">;\n        profile: {\n            attributes: Attribute[];\n        };\n        passwordRequired?: boolean;\n        realm: { registrationEmailAsUsername: boolean };\n    };\n    /** NOTE: Try to avoid passing a new ref every render for better performances. */\n    passwordValidators?: Validators;\n    i18n: I18n;\n}) {\n    const { kcContext, passwordValidators = {}, i18n } = params;\n\n    const attributesWithPassword = useMemo(\n        () =>\n            !kcContext.passwordRequired\n                ? kcContext.profile.attributes\n                : (() => {\n                      const name = kcContext.realm.registrationEmailAsUsername ? \"email\" : \"username\";\n\n                      return kcContext.profile.attributes.reduce<Attribute[]>(\n                          (prev, curr) => [\n                              ...prev,\n                              ...(curr.name !== name\n                                  ? [curr]\n                                  : [\n                                        curr,\n                                        id<Attribute>({\n                                            \"name\": \"password\",\n                                            \"displayName\": id<`\\${${MessageKey}}`>(\"${password}\"),\n                                            \"required\": true,\n                                            \"readOnly\": false,\n                                            \"validators\": passwordValidators,\n                                            \"annotations\": {},\n                                            \"groupAnnotations\": {},\n                                            \"autocomplete\": \"new-password\"\n                                        }),\n                                        id<Attribute>({\n                                            \"name\": \"password-confirm\",\n                                            \"displayName\": id<`\\${${MessageKey}}`>(\"${passwordConfirm}\"),\n                                            \"required\": true,\n                                            \"readOnly\": false,\n                                            \"validators\": {\n                                                \"_compareToOther\": {\n                                                    \"name\": \"password\",\n                                                    \"ignore.empty.value\": true,\n                                                    \"shouldBe\": \"equal\",\n                                                    \"error-message\": id<`\\${${MessageKey}}`>(\"${invalidPasswordConfirmMessage}\")\n                                                }\n                                            },\n                                            \"annotations\": {},\n                                            \"groupAnnotations\": {},\n                                            \"autocomplete\": \"new-password\"\n                                        })\n                                    ])\n                          ],\n                          []\n                      );\n                  })(),\n        [kcContext, passwordValidators]\n    );\n\n    const { getErrors } = useGetErrors({\n        \"kcContext\": {\n            \"messagesPerField\": kcContext.messagesPerField,\n            \"profile\": {\n                \"attributes\": attributesWithPassword\n            }\n        },\n        i18n\n    });\n\n    const initialInternalState = useMemo(\n        () =>\n            Object.fromEntries(\n                attributesWithPassword\n                    .map(attribute => ({\n                        attribute,\n                        \"errors\": getErrors({\n                            \"name\": attribute.name,\n                            \"fieldValueByAttributeName\": Object.fromEntries(\n                                attributesWithPassword.map(({ name, value }) => [name, { \"value\": value ?? \"\" }])\n                            )\n                        })\n                    }))\n                    .map(({ attribute, errors }) => [\n                        attribute.name,\n                        {\n                            \"value\": attribute.value ?? \"\",\n                            errors,\n                            \"doDisplayPotentialErrorMessages\": errors.length !== 0\n                        }\n                    ])\n            ),\n        [attributesWithPassword]\n    );\n\n    type InternalState = typeof initialInternalState;\n\n    const [formValidationInternalState, formValidationDispatch] = useReducer(\n        (\n            state: InternalState,\n            params:\n                | {\n                      action: \"update value\";\n                      name: string;\n                      newValue: string;\n                  }\n                | {\n                      action: \"focus lost\";\n                      name: string;\n                  }\n        ): InternalState => ({\n            ...state,\n            [params.name]: {\n                ...state[params.name],\n                ...(() => {\n                    switch (params.action) {\n                        case \"focus lost\":\n                            return { \"doDisplayPotentialErrorMessages\": true };\n                        case \"update value\":\n                            return {\n                                \"value\": params.newValue,\n                                \"errors\": getErrors({\n                                    \"name\": params.name,\n                                    \"fieldValueByAttributeName\": {\n                                        ...state,\n                                        [params.name]: { \"value\": params.newValue }\n                                    }\n                                })\n                            };\n                    }\n                })()\n            }\n        }),\n        initialInternalState\n    );\n\n    const formValidationState = useMemo(\n        () => ({\n            \"fieldStateByAttributeName\": Object.fromEntries(\n                Object.entries(formValidationInternalState).map(([name, { value, errors, doDisplayPotentialErrorMessages }]) => [\n                    name,\n                    { value, \"displayableErrors\": doDisplayPotentialErrorMessages ? errors : [] }\n                ])\n            ),\n            \"isFormSubmittable\": Object.entries(formValidationInternalState).every(\n                ([name, { value, errors }]) =>\n                    errors.length === 0 && (value !== \"\" || !attributesWithPassword.find(attribute => attribute.name === name)!.required)\n            )\n        }),\n        [formValidationInternalState, attributesWithPassword]\n    );\n\n    return {\n        formValidationState,\n        formValidationDispatch,\n        attributesWithPassword\n    };\n}\n\n/** Expect to be used in a component wrapped within a <I18nProvider> */\nfunction useGetErrors(params: {\n    kcContext: {\n        messagesPerField: Pick<KcContext.Common[\"messagesPerField\"], \"existsError\" | \"get\">;\n        profile: {\n            attributes: { name: string; value?: string; validators: Validators }[];\n        };\n    };\n    i18n: I18n;\n}) {\n    const { kcContext, i18n } = params;\n\n    const {\n        messagesPerField,\n        profile: { attributes }\n    } = kcContext;\n\n    const { msg, msgStr, advancedMsg, advancedMsgStr } = i18n;\n\n    const getErrors = useConstCallback((params: { name: string; fieldValueByAttributeName: Record<string, { value: string }> }) => {\n        const { name, fieldValueByAttributeName } = params;\n\n        const { value } = fieldValueByAttributeName[name];\n\n        const { value: defaultValue, validators } = attributes.find(attribute => attribute.name === name)!;\n\n        block: {\n            if ((defaultValue ?? \"\") !== value) {\n                break block;\n            }\n\n            let doesErrorExist: boolean;\n\n            try {\n                doesErrorExist = messagesPerField.existsError(name);\n            } catch {\n                break block;\n            }\n\n            if (!doesErrorExist) {\n                break block;\n            }\n\n            const errorMessageStr = messagesPerField.get(name);\n\n            return [\n                {\n                    \"validatorName\": undefined,\n                    errorMessageStr,\n                    \"errorMessage\": <span key={0}>{errorMessageStr}</span>\n                }\n            ];\n        }\n\n        const errors: {\n            errorMessage: JSX.Element;\n            errorMessageStr: string;\n            validatorName: keyof Validators | undefined;\n        }[] = [];\n\n        scope: {\n            const validatorName = \"length\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (max !== undefined && value.length > parseInt(max)) {\n                const msgArgs = [\"error-invalid-length-too-long\", max] as const;\n\n                errors.push({\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n\n            if (min !== undefined && value.length < parseInt(min)) {\n                const msgArgs = [\"error-invalid-length-too-short\", min] as const;\n\n                errors.push({\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs),\n                    validatorName\n                });\n            }\n        }\n\n        scope: {\n            const validatorName = \"_compareToOther\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, name: otherName, shouldBe, \"error-message\": errorMessageKey } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            const { value: otherValue } = fieldValueByAttributeName[otherName];\n\n            const isValid = (() => {\n                switch (shouldBe) {\n                    case \"different\":\n                        return otherValue !== value;\n                    case \"equal\":\n                        return otherValue === value;\n                }\n            })();\n\n            if (isValid) {\n                break scope;\n            }\n\n            const msgArg = [\n                errorMessageKey ??\n                    id<MessageKey>(\n                        (() => {\n                            switch (shouldBe) {\n                                case \"equal\":\n                                    return \"shouldBeEqual\";\n                                case \"different\":\n                                    return \"shouldBeDifferent\";\n                            }\n                        })()\n                    ),\n                otherName,\n                name,\n                shouldBe\n            ] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArg)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArg)\n            });\n        }\n\n        scope: {\n            const validatorName = \"pattern\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, pattern, \"error-message\": errorMessageKey } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (new RegExp(pattern).test(value)) {\n                break scope;\n            }\n\n            const msgArgs = [errorMessageKey ?? id<MessageKey>(\"shouldMatchPattern\"), pattern] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n\n        scope: {\n            if ([...errors].reverse()[0]?.validatorName === \"pattern\") {\n                break scope;\n            }\n\n            const validatorName = \"email\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            if (emailRegexp.test(value)) {\n                break scope;\n            }\n\n            const msgArgs = [id<MessageKey>(\"invalidEmailMessage\")] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": msgStr(...msgArgs)\n            });\n        }\n\n        scope: {\n            const validatorName = \"integer\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            const { \"ignore.empty.value\": ignoreEmptyValue = false, max, min } = validator;\n\n            if (ignoreEmptyValue && value === \"\") {\n                break scope;\n            }\n\n            const intValue = parseInt(value);\n\n            if (isNaN(intValue)) {\n                const msgArgs = [\"mustBeAnInteger\"] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n\n            if (max !== undefined && intValue > parseInt(max)) {\n                const msgArgs = [\"error-number-out-of-range-too-big\", max] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n\n            if (min !== undefined && intValue < parseInt(min)) {\n                const msgArgs = [\"error-number-out-of-range-too-small\", min] as const;\n\n                errors.push({\n                    validatorName,\n                    \"errorMessage\": <Fragment key={errors.length}>{msg(...msgArgs)}</Fragment>,\n                    \"errorMessageStr\": msgStr(...msgArgs)\n                });\n\n                break scope;\n            }\n        }\n\n        scope: {\n            const validatorName = \"options\";\n\n            const validator = validators[validatorName];\n\n            if (validator === undefined) {\n                break scope;\n            }\n\n            if (value === \"\") {\n                break scope;\n            }\n\n            if (validator.options.indexOf(value) >= 0) {\n                break scope;\n            }\n\n            const msgArgs = [id<MessageKey>(\"notAValidOption\")] as const;\n\n            errors.push({\n                validatorName,\n                \"errorMessage\": <Fragment key={errors.length}>{advancedMsg(...msgArgs)}</Fragment>,\n                \"errorMessageStr\": advancedMsgStr(...msgArgs)\n            });\n        }\n\n        //TODO: Implement missing validators.\n\n        return errors;\n    });\n\n    return { getErrors };\n}\n","import { createUseClassName } from \"keycloakify/lib/useGetClassName\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\n\nexport const { useGetClassName } = createUseClassName<ClassKey>({\n    \"defaultClasses\": {\n        \"kcBodyClass\": undefined,\n        \"kcHtmlClass\": \"login-pf\",\n        \"kcLoginClass\": \"login-pf-page\",\n        \"kcContentWrapperClass\": \"row\",\n        \"kcHeaderClass\": \"login-pf-page-header\",\n        \"kcHeaderWrapperClass\": undefined,\n        \"kcFormCardClass\": \"card-pf\",\n        \"kcFormCardAccountClass\": \"login-pf-accounts\",\n        \"kcFormSocialAccountClass\": \"login-pf-social-section\",\n        \"kcFormSocialAccountContentClass\": \"col-xs-12 col-sm-6\",\n        \"kcFormHeaderClass\": \"login-pf-header\",\n        \"kcLocaleWrapperClass\": undefined,\n        \"kcFeedbackErrorIcon\": \"pficon pficon-error-circle-o\",\n        \"kcFeedbackWarningIcon\": \"pficon pficon-warning-triangle-o\",\n        \"kcFeedbackSuccessIcon\": \"pficon pficon-ok\",\n        \"kcFeedbackInfoIcon\": \"pficon pficon-info\",\n        \"kcResetFlowIcon\": \"pficon pficon-arrow fa-2x\",\n        \"kcFormGroupClass\": \"form-group\",\n        \"kcLabelWrapperClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcSignUpClass\": \"login-pf-signup\",\n        \"kcInfoAreaWrapperClass\": undefined,\n\n        \"kcLogoClass\": \"login-pf-brand\",\n        \"kcContainerClass\": \"container-fluid\",\n        \"kcContentClass\": \"col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3 col-lg-6 col-lg-offset-3\",\n        \"kcFeedbackAreaClass\": \"col-md-12\",\n        \"kcLocaleClass\": \"col-xs-12 col-sm-1\",\n        \"kcAlertIconClasserror\": \"pficon pficon-error-circle-o\",\n\n        \"kcFormAreaClass\": \"col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\",\n        \"kcFormSocialAccountListClass\": \"login-pf-social list-unstyled login-pf-social-all\",\n        \"kcFormSocialAccountDoubleListClass\": \"login-pf-social-double-col\",\n        \"kcFormSocialAccountListLinkClass\": \"login-pf-social-link\",\n        \"kcWebAuthnKeyIcon\": \"pficon pficon-key\",\n        \"kcWebAuthnDefaultIcon\": \"pficon pficon-key\",\n\n        \"kcFormClass\": \"form-horizontal\",\n        \"kcFormGroupErrorClass\": \"has-error\",\n        \"kcLabelClass\": \"control-label\",\n        \"kcInputClass\": \"form-control\",\n        \"kcInputErrorMessageClass\": \"pf-c-form__helper-text pf-m-error required kc-feedback-text\",\n        \"kcInputWrapperClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormButtonsWrapperClass\": undefined,\n        \"kcFormOptionsClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormButtonsClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormSettingClass\": \"login-pf-settings\",\n        \"kcTextareaClass\": \"form-control\",\n\n        \"kcInfoAreaClass\": \"col-xs-12 col-sm-4 col-md-4 col-lg-5 details\",\n\n        // user-profile grouping\n        \"kcFormGroupHeader\": \"pf-c-form__group\",\n\n        // css classes for form buttons main class used for all buttons\n        \"kcButtonClass\": \"btn\",\n        // classes defining priority of the button - primary or default (there is typically only one priority button for the form)\n        \"kcButtonPrimaryClass\": \"btn-primary\",\n        \"kcButtonDefaultClass\": \"btn-default\",\n        // classes defining size of the button\n        \"kcButtonLargeClass\": \"btn-lg\",\n        \"kcButtonBlockClass\": \"btn-block\",\n\n        // css classes for input\n        \"kcInputLargeClass\": \"input-lg\",\n\n        // css classes for form accessability\n        \"kcSrOnlyClass\": \"sr-only\",\n\n        // css classes for select-authenticator form\n        \"kcSelectAuthListClass\": \"list-group list-view-pf\",\n        \"kcSelectAuthListItemClass\": \"list-group-item list-view-pf-stacked\",\n        \"kcSelectAuthListItemFillClass\": \"pf-l-split__item pf-m-fill\",\n        \"kcSelectAuthListItemIconPropertyClass\": \"fa-2x select-auth-box-icon-properties\",\n        \"kcSelectAuthListItemIconClass\": \"pf-l-split__item select-auth-box-icon\",\n        \"kcSelectAuthListItemTitle\": \"select-auth-box-paragraph\",\n        \"kcSelectAuthListItemInfoClass\": \"list-view-pf-main-info\",\n        \"kcSelectAuthListItemLeftClass\": \"list-view-pf-left\",\n        \"kcSelectAuthListItemBodyClass\": \"list-view-pf-body\",\n        \"kcSelectAuthListItemDescriptionClass\": \"list-view-pf-description\",\n        \"kcSelectAuthListItemHeadingClass\": \"list-group-item-heading\",\n        \"kcSelectAuthListItemHelpTextClass\": \"list-group-item-text\",\n\n        // css classes for the authenticators\n        \"kcAuthenticatorDefaultClass\": \"fa list-view-pf-icon-lg\",\n        \"kcAuthenticatorPasswordClass\": \"fa fa-unlock list-view-pf-icon-lg\",\n        \"kcAuthenticatorOTPClass\": \"fa fa-mobile list-view-pf-icon-lg\",\n        \"kcAuthenticatorWebAuthnClass\": \"fa fa-key list-view-pf-icon-lg\",\n        \"kcAuthenticatorWebAuthnPasswordlessClass\": \"fa fa-key list-view-pf-icon-lg\",\n\n        //css classes for the OTP Login Form\n        \"kcSelectOTPListClass\": \"card-pf card-pf-view card-pf-view-select card-pf-view-single-select\",\n        \"kcSelectOTPListItemClass\": \"card-pf-body card-pf-top-element\",\n        \"kcAuthenticatorOtpCircleClass\": \"fa fa-mobile card-pf-icon-circle\",\n        \"kcSelectOTPItemHeadingClass\": \"card-pf-title text-center\",\n        \"kcFormOptionsWrapperClass\": undefined\n    }\n});\n","if (!Array.prototype.every) {\n    Array.prototype.every = function (callbackfn: any, thisArg: any) {\n        \"use strict\";\n        var T, k;\n\n        if (this == null) {\n            throw new TypeError(\"this is null or not defined\");\n        }\n\n        // 1. Let O be the result of calling ToObject passing the this\n        //    value as the argument.\n        var O = Object(this);\n\n        // 2. Let lenValue be the result of calling the Get internal method\n        //    of O with the argument \"length\".\n        // 3. Let len be ToUint32(lenValue).\n        var len = O.length >>> 0;\n\n        // 4. If IsCallable(callbackfn) is false, throw a TypeError exception.\n        if (typeof callbackfn !== \"function\" && Object.prototype.toString.call(callbackfn) !== \"[object Function]\") {\n            throw new TypeError();\n        }\n\n        // 5. If thisArg was supplied, let T be thisArg; else let T be undefined.\n        if (arguments.length > 1) {\n            T = thisArg;\n        }\n\n        // 6. Let k be 0.\n        k = 0;\n\n        // 7. Repeat, while k < len\n        while (k < len) {\n            var kValue;\n\n            // a. Let Pk be ToString(k).\n            //   This is implicit for LHS operands of the in operator\n            // b. Let kPresent be the result of calling the HasProperty internal\n            //    method of O with argument Pk.\n            //   This step can be combined with c\n            // c. If kPresent is true, then\n            if (k in O) {\n                var testResult;\n                // i. Let kValue be the result of calling the Get internal method\n                //    of O with argument Pk.\n                kValue = O[k];\n\n                // ii. Let testResult be the result of calling the Call internal method\n                // of callbackfn with T as the this value if T is not undefined\n                // else is the result of calling callbackfn\n                // and argument list containing kValue, k, and O.\n                if (T) testResult = callbackfn.call(T, kValue, k, O);\n                else testResult = callbackfn(kValue, k, O);\n\n                // iii. If ToBoolean(testResult) is false, return false.\n                if (!testResult) {\n                    return false;\n                }\n            }\n            k++;\n        }\n        return true;\n    };\n}\n","import { assert } from \"tsafe/assert\";\nimport { typeGuard } from \"tsafe/typeGuard\";\n\nexport type CxArg = undefined | null | string | boolean | Partial<Record<string, boolean | null | undefined>> | readonly CxArg[];\n\nexport const clsx = (...args: CxArg[]): string => {\n    const len = args.length;\n    let i = 0;\n    let cls = \"\";\n    for (; i < len; i++) {\n        const arg = args[i];\n        if (arg == null) continue;\n\n        let toAdd;\n        switch (typeof arg) {\n            case \"boolean\":\n                break;\n            case \"object\": {\n                if (Array.isArray(arg)) {\n                    toAdd = clsx(...arg);\n                } else {\n                    assert(!typeGuard<{ length: number }>(arg, false));\n\n                    toAdd = \"\";\n                    for (const k in arg) {\n                        if (arg[k as string] && k) {\n                            toAdd && (toAdd += \" \");\n                            toAdd += k;\n                        }\n                    }\n                }\n                break;\n            }\n            default: {\n                toAdd = arg;\n            }\n        }\n        if (toAdd) {\n            cls && (cls += \" \");\n            cls += toAdd;\n        }\n    }\n    return cls;\n};\n","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/** https://docs.tsafe.dev/typeguard */\nexport function typeGuard<T>(_value: any, isMatched: boolean): _value is T {\n    return isMatched;\n}\n"],"names":["createUseClassName","params","defaultClasses","useGetClassName","classes","getClassName","useConstCallback","classKey","clsx","emailRegexp","useFormValidation","kcContext","_params$passwordValid","passwordValidators","i18n","attributesWithPassword","useMemo","passwordRequired","name","realm","registrationEmailAsUsername","profile","attributes","reduce","prev","curr","concat","_toConsumableArray","id","_useGetErrors","messagesPerField","msg","msgStr","advancedMsg","advancedMsgStr","getErrors","fieldValueByAttributeName","value","_attributes$find","find","attribute","defaultValue","validators","block","doesErrorExist","existsError","_b","errorMessageStr","get","undefined","_jsx","children","errors","validatorName","validator","_validator$ignoreEmp","ignoreEmptyValue","max","min","length","parseInt","msgArgs","push","Fragment","apply","_validator$ignoreEmp2","otherName","shouldBe","errorMessageKey","otherValue","msgArg","_validator2$ignoreEm","pattern","RegExp","test","_a","reverse","_validator3$ignoreEm","_validator4$ignoreEm","intValue","isNaN","options","indexOf","useGetErrors","initialInternalState","Object","fromEntries","map","_ref","_ref2","_useReducer","useReducer","state","assign","_defineProperty","action","newValue","_useReducer2","_slicedToArray","formValidationInternalState","formValidationDispatch","formValidationState","entries","_ref3","_ref4","_ref4$","doDisplayPotentialErrorMessages","every","_ref5","_ref6","_ref6$","required","Array","prototype","callbackfn","thisArg","T","k","this","TypeError","O","len","toString","call","arguments","kValue","i","cls","arg","toAdd","isArray","assert","typeGuard","_toPropertyKey","key","input","hint","prim","Symbol","toPrimitive","res","String","Number","obj","defineProperty","enumerable","configurable","writable","_value","isMatched"],"sourceRoot":""}
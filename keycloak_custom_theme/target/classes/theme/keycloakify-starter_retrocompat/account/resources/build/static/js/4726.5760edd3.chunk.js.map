{"version":3,"file":"static/js/4726.5760edd3.chunk.js","mappings":"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","sources":["keycloak-theme/login/pages/shared/UserProfileFormFields.tsx","keycloak-theme/login/pages/RegisterUserProfile.tsx"],"sourcesContent":["import { useEffect, Fragment } from \"react\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useFormValidation } from \"keycloakify/login/lib/useFormValidation\";\nimport type { Attribute } from \"keycloakify/login/kcContext/KcContext\";\nimport type { I18n } from \"../../i18n\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"];\n    i18n: I18n;\n    getClassName: (classKey: ClassKey) => string;\n    onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    BeforeField?: (props: { attribute: Attribute }) => JSX.Element | null;\n    AfterField?: (props: { attribute: Attribute }) => JSX.Element | null;\n};\n\nexport function UserProfileFormFields(props: UserProfileFormFieldsProps) {\n    const { kcContext, onIsFormSubmittableValueChange, i18n, getClassName, BeforeField, AfterField } = props;\n\n    const { advancedMsg, msg } = i18n;\n\n    const {\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n        formValidationDispatch,\n        attributesWithPassword\n    } = useFormValidation({\n        kcContext,\n        i18n\n    });\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    let currentGroup = \"\";\n\n    return (\n        <>\n            {attributesWithPassword.map((attribute, i) => {\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                const formGroupClassName = clsx(\n                    getClassName(\"kcFormGroupClass\"),\n                    displayableErrors.length !== 0 && getClassName(\"kcFormGroupErrorClass\")\n                );\n\n                return (\n                    <Fragment key={i}>\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                            <div className={formGroupClassName}>\n                                <div className={getClassName(\"kcContentWrapperClass\")}>\n                                    <label id={`header-${group}`} className={getClassName(\"kcFormGroupHeader\")}>\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\n                                    </label>\n                                </div>\n                                {groupDisplayDescription !== \"\" && (\n                                    <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                        <label id={`description-${group}`} className={getClassName(\"kcLabelClass\")}>\n                                            {advancedMsg(groupDisplayDescription)}\n                                        </label>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n\n                        {BeforeField && <BeforeField attribute={attribute} />}\n\n                        <div className={formGroupClassName}>\n                            <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                <label htmlFor={attribute.name} className={getClassName(\"kcLabelClass\")}>\n                                    {advancedMsg(attribute.displayName ?? \"\")}\n                                </label>\n                                {attribute.required && <>*</>}\n                            </div>\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                {(() => {\n                                    const { options } = attribute.validators;\n\n                                    if (options !== undefined) {\n                                        return (\n                                            <select\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                onChange={event =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"update value\",\n                                                        \"name\": attribute.name,\n                                                        \"newValue\": event.target.value\n                                                    })\n                                                }\n                                                onBlur={() =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"focus lost\",\n                                                        \"name\": attribute.name\n                                                    })\n                                                }\n                                                value={value}\n                                            >\n                                                <>\n                                                    <option value=\"\" selected disabled hidden>\n                                                        {msg(\"selectAnOption\")}\n                                                    </option>\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </>\n                                            </select>\n                                        );\n                                    }\n\n                                    return (\n                                        <input\n                                            type={(() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })()}\n                                            id={attribute.name}\n                                            name={attribute.name}\n                                            value={value}\n                                            onChange={event =>\n                                                formValidationDispatch({\n                                                    \"action\": \"update value\",\n                                                    \"name\": attribute.name,\n                                                    \"newValue\": event.target.value\n                                                })\n                                            }\n                                            onBlur={() =>\n                                                formValidationDispatch({\n                                                    \"action\": \"focus lost\",\n                                                    \"name\": attribute.name\n                                                })\n                                            }\n                                            className={getClassName(\"kcInputClass\")}\n                                            aria-invalid={displayableErrors.length !== 0}\n                                            disabled={attribute.readOnly}\n                                            autoComplete={attribute.autocomplete}\n                                        />\n                                    );\n                                })()}\n                                {displayableErrors.length !== 0 &&\n                                    (() => {\n                                        const divId = `input-error-${attribute.name}`;\n\n                                        return (\n                                            <>\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\n                                                <span\n                                                    id={divId}\n                                                    className={getClassName(\"kcInputErrorMessageClass\")}\n                                                    style={{\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                    }}\n                                                    aria-live=\"polite\"\n                                                >\n                                                    {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                </span>\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                        </div>\n                        {AfterField && <AfterField attribute={attribute} />}\n                    </Fragment>\n                );\n            })}\n        </>\n    );\n}","// ejected using 'npx eject-keycloak-page'\nimport { useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { UserProfileFormFields } from \"./shared/UserProfileFormFields\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function RegisterUserProfile(props: PageProps<Extract<KcContext, { pageId: \"register-user-profile.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, messagesPerField, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    const [isFormSubmittable, setIsFormSubmittable] = useState(false);\n\n    return (\n        <Template\n            {...{ kcContext, i18n, doUseDefaultCss, classes }}\n            displayMessage={messagesPerField.exists(\"global\")}\n            displayRequiredFields={true}\n            headerNode={msg(\"registerTitle\")}\n        >\n            <form id=\"kc-register-form\" className={getClassName(\"kcFormClass\")} action={url.registrationAction} method=\"post\">\n                <UserProfileFormFields\n                    kcContext={kcContext}\n                    onIsFormSubmittableValueChange={setIsFormSubmittable}\n                    i18n={i18n}\n                    getClassName={getClassName}\n                />\n                {recaptchaRequired && (\n                    <div className=\"form-group\">\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\n                            <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey} />\n                        </div>\n                    </div>\n                )}\n                <div className={getClassName(\"kcFormGroupClass\")} style={{ \"marginBottom\": 30 }}>\n                    <div id=\"kc-form-options\" className={getClassName(\"kcFormOptionsClass\")}>\n                        <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\n                            <span>\n                                <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                            </span>\n                        </div>\n                    </div>\n\n                    <div id=\"kc-form-buttons\" className={getClassName(\"kcFormButtonsClass\")}>\n                        <input\n                            className={clsx(\n                                getClassName(\"kcButtonClass\"),\n                                getClassName(\"kcButtonPrimaryClass\"),\n                                getClassName(\"kcButtonBlockClass\"),\n                                getClassName(\"kcButtonLargeClass\")\n                            )}\n                            type=\"submit\"\n                            value={msgStr(\"doRegister\")}\n                            disabled={!isFormSubmittable}\n                        />\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n"],"names":["UserProfileFormFields","props","kcContext","onIsFormSubmittableValueChange","i18n","getClassName","BeforeField","AfterField","advancedMsg","msg","_useFormValidation","useFormValidation","_useFormValidation$fo","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationDispatch","attributesWithPassword","useEffect","currentGroup","_jsx","_Fragment","children","map","attribute","i","_attribute$displayNam","_attribute$group","group","_attribute$groupDispl","groupDisplayHeader","_attribute$groupDispl2","groupDisplayDescription","_fieldStateByAttribut","name","value","displayableErrors","formGroupClassName","clsx","length","_jsxs","Fragment","className","id","concat","htmlFor","displayName","required","options","validators","undefined","onChange","event","target","onBlur","selected","disabled","hidden","option","type","readOnly","autoComplete","autocomplete","divId","style","_ref","errorMessage","RegisterUserProfile","doUseDefaultCss","Template","classes","useGetClassName","url","messagesPerField","recaptchaRequired","recaptchaSiteKey","msgStr","_useState","useState","_useState2","_slicedToArray","setIsFormSubmittable","displayMessage","exists","displayRequiredFields","headerNode","action","registrationAction","method","href","loginUrl"],"sourceRoot":""}
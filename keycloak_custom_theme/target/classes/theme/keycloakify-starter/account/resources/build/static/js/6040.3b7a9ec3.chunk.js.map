{"version":3,"file":"static/js/6040.3b7a9ec3.chunk.js","mappings":"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","sources":["../node_modules/keycloakify/src/login/pages/IdpReviewUserProfile.tsx","../node_modules/keycloakify/src/login/pages/shared/UserProfileFormFields.tsx"],"sourcesContent":["import { useState } from \"react\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { UserProfileFormFields } from \"keycloakify/login/pages/shared/UserProfileFormFields\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function IdpReviewUserProfile(props: PageProps<Extract<KcContext, { pageId: \"idp-review-user-profile.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { msg, msgStr } = i18n;\n\n    const { url } = kcContext;\n\n    const [isFomSubmittable, setIsFomSubmittable] = useState(false);\n\n    return (\n        <Template {...{ kcContext, i18n, doUseDefaultCss, classes }} headerNode={msg(\"loginIdpReviewProfileTitle\")}>\n            <form id=\"kc-idp-review-profile-form\" className={getClassName(\"kcFormClass\")} action={url.loginAction} method=\"post\">\n                <UserProfileFormFields\n                    kcContext={kcContext}\n                    onIsFormSubmittableValueChange={setIsFomSubmittable}\n                    i18n={i18n}\n                    getClassName={getClassName}\n                />\n                <div className={getClassName(\"kcFormGroupClass\")}>\n                    <div id=\"kc-form-options\" className={getClassName(\"kcFormOptionsClass\")}>\n                        <div className={getClassName(\"kcFormOptionsWrapperClass\")} />\n                    </div>\n                    <div id=\"kc-form-buttons\" className={getClassName(\"kcFormButtonsClass\")}>\n                        <input\n                            className={clsx(\n                                getClassName(\"kcButtonClass\"),\n                                getClassName(\"kcButtonPrimaryClass\"),\n                                getClassName(\"kcButtonBlockClass\"),\n                                getClassName(\"kcButtonLargeClass\")\n                            )}\n                            type=\"submit\"\n                            value={msgStr(\"doSubmit\")}\n                            disabled={!isFomSubmittable}\n                        />\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import { useEffect, Fragment } from \"react\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport { useFormValidation } from \"keycloakify/login/lib/useFormValidation\";\nimport type { Attribute } from \"keycloakify/login/kcContext/KcContext\";\nimport type { I18n } from \"../../i18n\";\n\nexport type UserProfileFormFieldsProps = {\n    kcContext: Parameters<typeof useFormValidation>[0][\"kcContext\"];\n    i18n: I18n;\n    getClassName: (classKey: ClassKey) => string;\n    onIsFormSubmittableValueChange: (isFormSubmittable: boolean) => void;\n    BeforeField?: (props: { attribute: Attribute }) => JSX.Element | null;\n    AfterField?: (props: { attribute: Attribute }) => JSX.Element | null;\n};\n\nexport function UserProfileFormFields(props: UserProfileFormFieldsProps) {\n    const { kcContext, onIsFormSubmittableValueChange, i18n, getClassName, BeforeField, AfterField } = props;\n\n    const { advancedMsg, msg } = i18n;\n\n    const {\n        formValidationState: { fieldStateByAttributeName, isFormSubmittable },\n        formValidationDispatch,\n        attributesWithPassword\n    } = useFormValidation({\n        kcContext,\n        i18n\n    });\n\n    useEffect(() => {\n        onIsFormSubmittableValueChange(isFormSubmittable);\n    }, [isFormSubmittable]);\n\n    let currentGroup = \"\";\n\n    return (\n        <>\n            {attributesWithPassword.map((attribute, i) => {\n                const { group = \"\", groupDisplayHeader = \"\", groupDisplayDescription = \"\" } = attribute;\n\n                const { value, displayableErrors } = fieldStateByAttributeName[attribute.name];\n\n                const formGroupClassName = clsx(\n                    getClassName(\"kcFormGroupClass\"),\n                    displayableErrors.length !== 0 && getClassName(\"kcFormGroupErrorClass\")\n                );\n\n                return (\n                    <Fragment key={i}>\n                        {group !== currentGroup && (currentGroup = group) !== \"\" && (\n                            <div className={formGroupClassName}>\n                                <div className={getClassName(\"kcContentWrapperClass\")}>\n                                    <label id={`header-${group}`} className={getClassName(\"kcFormGroupHeader\")}>\n                                        {advancedMsg(groupDisplayHeader) || currentGroup}\n                                    </label>\n                                </div>\n                                {groupDisplayDescription !== \"\" && (\n                                    <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                        <label id={`description-${group}`} className={getClassName(\"kcLabelClass\")}>\n                                            {advancedMsg(groupDisplayDescription)}\n                                        </label>\n                                    </div>\n                                )}\n                            </div>\n                        )}\n\n                        {BeforeField && <BeforeField attribute={attribute} />}\n\n                        <div className={formGroupClassName}>\n                            <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                <label htmlFor={attribute.name} className={getClassName(\"kcLabelClass\")}>\n                                    {advancedMsg(attribute.displayName ?? \"\")}\n                                </label>\n                                {attribute.required && <>*</>}\n                            </div>\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                {(() => {\n                                    const { options } = attribute.validators;\n\n                                    if (options !== undefined) {\n                                        return (\n                                            <select\n                                                id={attribute.name}\n                                                name={attribute.name}\n                                                onChange={event =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"update value\",\n                                                        \"name\": attribute.name,\n                                                        \"newValue\": event.target.value\n                                                    })\n                                                }\n                                                onBlur={() =>\n                                                    formValidationDispatch({\n                                                        \"action\": \"focus lost\",\n                                                        \"name\": attribute.name\n                                                    })\n                                                }\n                                                value={value}\n                                            >\n                                                <>\n                                                    <option value=\"\" selected disabled hidden>\n                                                        {msg(\"selectAnOption\")}\n                                                    </option>\n                                                    {options.options.map(option => (\n                                                        <option key={option} value={option}>\n                                                            {option}\n                                                        </option>\n                                                    ))}\n                                                </>\n                                            </select>\n                                        );\n                                    }\n\n                                    return (\n                                        <input\n                                            type={(() => {\n                                                switch (attribute.name) {\n                                                    case \"password-confirm\":\n                                                    case \"password\":\n                                                        return \"password\";\n                                                    default:\n                                                        return \"text\";\n                                                }\n                                            })()}\n                                            id={attribute.name}\n                                            name={attribute.name}\n                                            value={value}\n                                            onChange={event =>\n                                                formValidationDispatch({\n                                                    \"action\": \"update value\",\n                                                    \"name\": attribute.name,\n                                                    \"newValue\": event.target.value\n                                                })\n                                            }\n                                            onBlur={() =>\n                                                formValidationDispatch({\n                                                    \"action\": \"focus lost\",\n                                                    \"name\": attribute.name\n                                                })\n                                            }\n                                            className={getClassName(\"kcInputClass\")}\n                                            aria-invalid={displayableErrors.length !== 0}\n                                            disabled={attribute.readOnly}\n                                            autoComplete={attribute.autocomplete}\n                                        />\n                                    );\n                                })()}\n                                {displayableErrors.length !== 0 &&\n                                    (() => {\n                                        const divId = `input-error-${attribute.name}`;\n\n                                        return (\n                                            <>\n                                                <style>{`#${divId} > span: { display: block; }`}</style>\n                                                <span\n                                                    id={divId}\n                                                    className={getClassName(\"kcInputErrorMessageClass\")}\n                                                    style={{\n                                                        \"position\": displayableErrors.length === 1 ? \"absolute\" : undefined\n                                                    }}\n                                                    aria-live=\"polite\"\n                                                >\n                                                    {displayableErrors.map(({ errorMessage }) => errorMessage)}\n                                                </span>\n                                            </>\n                                        );\n                                    })()}\n                            </div>\n                        </div>\n                        {AfterField && <AfterField attribute={attribute} />}\n                    </Fragment>\n                );\n            })}\n        </>\n    );\n}\n"],"names":["IdpReviewUserProfile","props","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","msg","msgStr","url","_useState","useState","_useState2","_slicedToArray","isFomSubmittable","setIsFomSubmittable","_jsx","Object","assign","headerNode","children","_jsxs","id","className","action","loginAction","method","UserProfileFormFields","onIsFormSubmittableValueChange","clsx","type","value","disabled","BeforeField","AfterField","advancedMsg","_useFormValidation","useFormValidation","_useFormValidation$fo","formValidationState","fieldStateByAttributeName","isFormSubmittable","formValidationDispatch","attributesWithPassword","useEffect","currentGroup","_Fragment","map","attribute","i","_attribute$group","group","_attribute$groupDispl","groupDisplayHeader","_attribute$groupDispl2","groupDisplayDescription","_fieldStateByAttribut","name","displayableErrors","formGroupClassName","length","Fragment","concat","htmlFor","_a","displayName","required","options","validators","undefined","onChange","event","target","onBlur","selected","hidden","option","readOnly","autoComplete","autocomplete","divId","style","_ref","errorMessage"],"sourceRoot":""}
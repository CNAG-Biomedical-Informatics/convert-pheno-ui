{"version":3,"file":"static/js/579.97a7b6c5.chunk.js","mappings":"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","sources":["keycloak-theme/login/pages/Register.tsx","../node_modules/keycloakify/src/lib/useGetClassName.ts","../node_modules/keycloakify/src/login/lib/useGetClassName.ts","../node_modules/keycloakify/src/tools/clsx.ts","../node_modules/tsafe/src/typeGuard.ts"],"sourcesContent":["// ejected using 'npx eject-keycloak-page'\nimport { clsx } from \"keycloakify/tools/clsx\";\nimport type { PageProps } from \"keycloakify/login/pages/PageProps\";\nimport { useGetClassName } from \"keycloakify/login/lib/useGetClassName\";\nimport type { KcContext } from \"../kcContext\";\nimport type { I18n } from \"../i18n\";\n\nexport default function Register(props: PageProps<Extract<KcContext, { pageId: \"register.ftl\" }>, I18n>) {\n    const { kcContext, i18n, doUseDefaultCss, Template, classes } = props;\n\n    const { getClassName } = useGetClassName({\n        doUseDefaultCss,\n        classes\n    });\n\n    const { url, messagesPerField, register, realm, passwordRequired, recaptchaRequired, recaptchaSiteKey } = kcContext;\n\n    const { msg, msgStr } = i18n;\n\n    return (\n        <Template {...{ kcContext, i18n, doUseDefaultCss, classes }} headerNode={msg(\"registerTitle\")}>\n            <form id=\"kc-register-form\" className={getClassName(\"kcFormClass\")} action={url.registrationAction} method=\"post\">\n                <div\n                    className={clsx(\n                        getClassName(\"kcFormGroupClass\"),\n                        messagesPerField.printIfExists(\"firstName\", getClassName(\"kcFormGroupErrorClass\"))\n                    )}\n                >\n                    <div className={getClassName(\"kcLabelWrapperClass\")}>\n                        <label htmlFor=\"firstName\" className={getClassName(\"kcLabelClass\")}>\n                            {msg(\"firstName\")}\n                        </label>\n                    </div>\n                    <div className={getClassName(\"kcInputWrapperClass\")}>\n                        <input\n                            type=\"text\"\n                            id=\"firstName\"\n                            className={getClassName(\"kcInputClass\")}\n                            name=\"firstName\"\n                            defaultValue={register.formData.firstName ?? \"\"}\n                        />\n                    </div>\n                </div>\n\n                <div\n                    className={clsx(\n                        getClassName(\"kcFormGroupClass\"),\n                        messagesPerField.printIfExists(\"lastName\", getClassName(\"kcFormGroupErrorClass\"))\n                    )}\n                >\n                    <div className={getClassName(\"kcLabelWrapperClass\")}>\n                        <label htmlFor=\"lastName\" className={getClassName(\"kcLabelClass\")}>\n                            {msg(\"lastName\")}\n                        </label>\n                    </div>\n                    <div className={getClassName(\"kcInputWrapperClass\")}>\n                        <input\n                            type=\"text\"\n                            id=\"lastName\"\n                            className={getClassName(\"kcInputClass\")}\n                            name=\"lastName\"\n                            defaultValue={register.formData.lastName ?? \"\"}\n                        />\n                    </div>\n                </div>\n\n                <div\n                    className={clsx(getClassName(\"kcFormGroupClass\"), messagesPerField.printIfExists(\"email\", getClassName(\"kcFormGroupErrorClass\")))}\n                >\n                    <div className={getClassName(\"kcLabelWrapperClass\")}>\n                        <label htmlFor=\"email\" className={getClassName(\"kcLabelClass\")}>\n                            {msg(\"email\")}\n                        </label>\n                    </div>\n                    <div className={getClassName(\"kcInputWrapperClass\")}>\n                        <input\n                            type=\"text\"\n                            id=\"email\"\n                            className={getClassName(\"kcInputClass\")}\n                            name=\"email\"\n                            defaultValue={register.formData.email ?? \"\"}\n                            autoComplete=\"email\"\n                        />\n                    </div>\n                </div>\n                {!realm.registrationEmailAsUsername && (\n                    <div\n                        className={clsx(\n                            getClassName(\"kcFormGroupClass\"),\n                            messagesPerField.printIfExists(\"username\", getClassName(\"kcFormGroupErrorClass\"))\n                        )}\n                    >\n                        <div className={getClassName(\"kcLabelWrapperClass\")}>\n                            <label htmlFor=\"username\" className={getClassName(\"kcLabelClass\")}>\n                                {msg(\"username\")}\n                            </label>\n                        </div>\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\n                            <input\n                                type=\"text\"\n                                id=\"username\"\n                                className={getClassName(\"kcInputClass\")}\n                                name=\"username\"\n                                defaultValue={register.formData.username ?? \"\"}\n                                autoComplete=\"username\"\n                            />\n                        </div>\n                    </div>\n                )}\n                {passwordRequired && (\n                    <>\n                        <div\n                            className={clsx(\n                                getClassName(\"kcFormGroupClass\"),\n                                messagesPerField.printIfExists(\"password\", getClassName(\"kcFormGroupErrorClass\"))\n                            )}\n                        >\n                            <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                <label htmlFor=\"password\" className={getClassName(\"kcLabelClass\")}>\n                                    {msg(\"password\")}\n                                </label>\n                            </div>\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                <input\n                                    type=\"password\"\n                                    id=\"password\"\n                                    className={getClassName(\"kcInputClass\")}\n                                    name=\"password\"\n                                    autoComplete=\"new-password\"\n                                />\n                            </div>\n                        </div>\n\n                        <div\n                            className={clsx(\n                                getClassName(\"kcFormGroupClass\"),\n                                messagesPerField.printIfExists(\"password-confirm\", getClassName(\"kcFormGroupErrorClass\"))\n                            )}\n                        >\n                            <div className={getClassName(\"kcLabelWrapperClass\")}>\n                                <label htmlFor=\"password-confirm\" className={getClassName(\"kcLabelClass\")}>\n                                    {msg(\"passwordConfirm\")}\n                                </label>\n                            </div>\n                            <div className={getClassName(\"kcInputWrapperClass\")}>\n                                <input type=\"password\" id=\"password-confirm\" className={getClassName(\"kcInputClass\")} name=\"password-confirm\" />\n                            </div>\n                        </div>\n                    </>\n                )}\n                {recaptchaRequired && (\n                    <div className=\"form-group\">\n                        <div className={getClassName(\"kcInputWrapperClass\")}>\n                            <div className=\"g-recaptcha\" data-size=\"compact\" data-sitekey={recaptchaSiteKey}></div>\n                        </div>\n                    </div>\n                )}\n                <div className={getClassName(\"kcFormGroupClass\")}>\n                    <div id=\"kc-form-options\" className={getClassName(\"kcFormOptionsClass\")}>\n                        <div className={getClassName(\"kcFormOptionsWrapperClass\")}>\n                            <span>\n                                <a href={url.loginUrl}>{msg(\"backToLogin\")}</a>\n                            </span>\n                        </div>\n                    </div>\n\n                    <div id=\"kc-form-buttons\" className={getClassName(\"kcFormButtonsClass\")}>\n                        <input\n                            className={clsx(\n                                getClassName(\"kcButtonClass\"),\n                                getClassName(\"kcButtonPrimaryClass\"),\n                                getClassName(\"kcButtonBlockClass\"),\n                                getClassName(\"kcButtonLargeClass\")\n                            )}\n                            type=\"submit\"\n                            value={msgStr(\"doRegister\")}\n                        />\n                    </div>\n                </div>\n            </form>\n        </Template>\n    );\n}\n","import { clsx } from \"keycloakify/tools/clsx\";\nimport { useConstCallback } from \"keycloakify/tools/useConstCallback\";\n\nexport function createUseClassName<ClassKey extends string>(params: { defaultClasses: Record<ClassKey, string | undefined> }) {\n    const { defaultClasses } = params;\n\n    function useGetClassName(params: { doUseDefaultCss: boolean; classes: Partial<Record<ClassKey, string>> | undefined }) {\n        const { classes } = params;\n\n        const getClassName = useConstCallback((classKey: ClassKey): string => {\n            return clsx(classKey, defaultClasses[classKey], classes?.[classKey]);\n        });\n\n        return { getClassName };\n    }\n\n    return { useGetClassName };\n}\n","import { createUseClassName } from \"keycloakify/lib/useGetClassName\";\nimport type { ClassKey } from \"keycloakify/login/TemplateProps\";\n\nexport const { useGetClassName } = createUseClassName<ClassKey>({\n    \"defaultClasses\": {\n        \"kcBodyClass\": undefined,\n        \"kcHtmlClass\": \"login-pf\",\n        \"kcLoginClass\": \"login-pf-page\",\n        \"kcContentWrapperClass\": \"row\",\n        \"kcHeaderClass\": \"login-pf-page-header\",\n        \"kcHeaderWrapperClass\": undefined,\n        \"kcFormCardClass\": \"card-pf\",\n        \"kcFormCardAccountClass\": \"login-pf-accounts\",\n        \"kcFormSocialAccountClass\": \"login-pf-social-section\",\n        \"kcFormSocialAccountContentClass\": \"col-xs-12 col-sm-6\",\n        \"kcFormHeaderClass\": \"login-pf-header\",\n        \"kcLocaleWrapperClass\": undefined,\n        \"kcFeedbackErrorIcon\": \"pficon pficon-error-circle-o\",\n        \"kcFeedbackWarningIcon\": \"pficon pficon-warning-triangle-o\",\n        \"kcFeedbackSuccessIcon\": \"pficon pficon-ok\",\n        \"kcFeedbackInfoIcon\": \"pficon pficon-info\",\n        \"kcResetFlowIcon\": \"pficon pficon-arrow fa-2x\",\n        \"kcFormGroupClass\": \"form-group\",\n        \"kcLabelWrapperClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcSignUpClass\": \"login-pf-signup\",\n        \"kcInfoAreaWrapperClass\": undefined,\n\n        \"kcLogoClass\": \"login-pf-brand\",\n        \"kcContainerClass\": \"container-fluid\",\n        \"kcContentClass\": \"col-sm-8 col-sm-offset-2 col-md-6 col-md-offset-3 col-lg-6 col-lg-offset-3\",\n        \"kcFeedbackAreaClass\": \"col-md-12\",\n        \"kcLocaleClass\": \"col-xs-12 col-sm-1\",\n        \"kcAlertIconClasserror\": \"pficon pficon-error-circle-o\",\n\n        \"kcFormAreaClass\": \"col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2 col-lg-8 col-lg-offset-2\",\n        \"kcFormSocialAccountListClass\": \"login-pf-social list-unstyled login-pf-social-all\",\n        \"kcFormSocialAccountDoubleListClass\": \"login-pf-social-double-col\",\n        \"kcFormSocialAccountListLinkClass\": \"login-pf-social-link\",\n        \"kcWebAuthnKeyIcon\": \"pficon pficon-key\",\n        \"kcWebAuthnDefaultIcon\": \"pficon pficon-key\",\n\n        \"kcFormClass\": \"form-horizontal\",\n        \"kcFormGroupErrorClass\": \"has-error\",\n        \"kcLabelClass\": \"control-label\",\n        \"kcInputClass\": \"form-control\",\n        \"kcInputErrorMessageClass\": \"pf-c-form__helper-text pf-m-error required kc-feedback-text\",\n        \"kcInputWrapperClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormButtonsWrapperClass\": undefined,\n        \"kcFormOptionsClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormButtonsClass\": \"col-xs-12 col-sm-12 col-md-12 col-lg-12\",\n        \"kcFormSettingClass\": \"login-pf-settings\",\n        \"kcTextareaClass\": \"form-control\",\n\n        \"kcInfoAreaClass\": \"col-xs-12 col-sm-4 col-md-4 col-lg-5 details\",\n\n        // user-profile grouping\n        \"kcFormGroupHeader\": \"pf-c-form__group\",\n\n        // css classes for form buttons main class used for all buttons\n        \"kcButtonClass\": \"btn\",\n        // classes defining priority of the button - primary or default (there is typically only one priority button for the form)\n        \"kcButtonPrimaryClass\": \"btn-primary\",\n        \"kcButtonDefaultClass\": \"btn-default\",\n        // classes defining size of the button\n        \"kcButtonLargeClass\": \"btn-lg\",\n        \"kcButtonBlockClass\": \"btn-block\",\n\n        // css classes for input\n        \"kcInputLargeClass\": \"input-lg\",\n\n        // css classes for form accessability\n        \"kcSrOnlyClass\": \"sr-only\",\n\n        // css classes for select-authenticator form\n        \"kcSelectAuthListClass\": \"list-group list-view-pf\",\n        \"kcSelectAuthListItemClass\": \"list-group-item list-view-pf-stacked\",\n        \"kcSelectAuthListItemFillClass\": \"pf-l-split__item pf-m-fill\",\n        \"kcSelectAuthListItemIconPropertyClass\": \"fa-2x select-auth-box-icon-properties\",\n        \"kcSelectAuthListItemIconClass\": \"pf-l-split__item select-auth-box-icon\",\n        \"kcSelectAuthListItemTitle\": \"select-auth-box-paragraph\",\n        \"kcSelectAuthListItemInfoClass\": \"list-view-pf-main-info\",\n        \"kcSelectAuthListItemLeftClass\": \"list-view-pf-left\",\n        \"kcSelectAuthListItemBodyClass\": \"list-view-pf-body\",\n        \"kcSelectAuthListItemDescriptionClass\": \"list-view-pf-description\",\n        \"kcSelectAuthListItemHeadingClass\": \"list-group-item-heading\",\n        \"kcSelectAuthListItemHelpTextClass\": \"list-group-item-text\",\n\n        // css classes for the authenticators\n        \"kcAuthenticatorDefaultClass\": \"fa list-view-pf-icon-lg\",\n        \"kcAuthenticatorPasswordClass\": \"fa fa-unlock list-view-pf-icon-lg\",\n        \"kcAuthenticatorOTPClass\": \"fa fa-mobile list-view-pf-icon-lg\",\n        \"kcAuthenticatorWebAuthnClass\": \"fa fa-key list-view-pf-icon-lg\",\n        \"kcAuthenticatorWebAuthnPasswordlessClass\": \"fa fa-key list-view-pf-icon-lg\",\n\n        //css classes for the OTP Login Form\n        \"kcSelectOTPListClass\": \"card-pf card-pf-view card-pf-view-select card-pf-view-single-select\",\n        \"kcSelectOTPListItemClass\": \"card-pf-body card-pf-top-element\",\n        \"kcAuthenticatorOtpCircleClass\": \"fa fa-mobile card-pf-icon-circle\",\n        \"kcSelectOTPItemHeadingClass\": \"card-pf-title text-center\",\n        \"kcFormOptionsWrapperClass\": undefined\n    }\n});\n","import { assert } from \"tsafe/assert\";\nimport { typeGuard } from \"tsafe/typeGuard\";\n\nexport type CxArg = undefined | null | string | boolean | Partial<Record<string, boolean | null | undefined>> | readonly CxArg[];\n\nexport const clsx = (...args: CxArg[]): string => {\n    const len = args.length;\n    let i = 0;\n    let cls = \"\";\n    for (; i < len; i++) {\n        const arg = args[i];\n        if (arg == null) continue;\n\n        let toAdd;\n        switch (typeof arg) {\n            case \"boolean\":\n                break;\n            case \"object\": {\n                if (Array.isArray(arg)) {\n                    toAdd = clsx(...arg);\n                } else {\n                    assert(!typeGuard<{ length: number }>(arg, false));\n\n                    toAdd = \"\";\n                    for (const k in arg) {\n                        if (arg[k as string] && k) {\n                            toAdd && (toAdd += \" \");\n                            toAdd += k;\n                        }\n                    }\n                }\n                break;\n            }\n            default: {\n                toAdd = arg;\n            }\n        }\n        if (toAdd) {\n            cls && (cls += \" \");\n            cls += toAdd;\n        }\n    }\n    return cls;\n};\n","/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/** https://docs.tsafe.dev/typeguard */\nexport function typeGuard<T>(_value: any, isMatched: boolean): _value is T {\n    return isMatched;\n}\n"],"names":["Register","props","_register$formData$fi","_register$formData$la","_register$formData$em","_register$formData$us","kcContext","i18n","doUseDefaultCss","Template","classes","getClassName","useGetClassName","url","messagesPerField","register","realm","passwordRequired","recaptchaRequired","recaptchaSiteKey","msg","msgStr","_jsx","headerNode","children","_jsxs","id","className","action","registrationAction","method","clsx","printIfExists","htmlFor","type","name","defaultValue","formData","firstName","lastName","email","autoComplete","registrationEmailAsUsername","username","_Fragment","href","loginUrl","value","createUseClassName","params","defaultClasses","useConstCallback","classKey","undefined","len","arguments","length","i","cls","arg","toAdd","Array","isArray","apply","_toConsumableArray","k","assert","typeGuard","_value","isMatched"],"sourceRoot":""}
version: '3.3'
services:
  api:
    image: leistivo/convert-pheno-ui-server:${DOCKER_IMG_TAG}
    container_name: convert-pheno-api
    # build:
    #   context: ./convertPheno_server
    #   target: prod
    #   args:
    #     - IGNORE_CACHE_FROM_HERE=${IGNORE_CACHE_FROM_HERE}
    depends_on:
      api-db:
        condition: service_healthy
    ports:
      - 5000:5000
    volumes:
      - api-data:/opt/data
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      API_DB_USER: ${API_DB_USER}
      API_DB_PW: ${API_DB_PW}
      API_DB_HOST: ${API_DB_HOST}
      API_DB_PORT: ${API_DB_PORT}
      API_DB_NAME: ${API_DB_NAME}
      KC_REALM: ${KC_REALM}
      UID: ${UID}
      GID: ${GID}
      API_SECURITY: "false"
    restart: unless-stopped
    healthcheck:
      test: curl -f http://0.0.0.0:5000/api/curltest
      interval: 10s
      timeout: 10s
      retries: 5
    command:
      [
        "gunicorn",
        "--conf",
        "server/config/gunicorn_conf.py",
        "server.app:app"
      ]
    tty: true

  api-db:
    image: postgres:13-alpine
    container_name: convert-pheno-api-db
    volumes:
      - postgres-data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${API_DB_NAME}
      - POSTGRES_USER=${API_DB_USER}
      - POSTGRES_PASSWORD=${API_DB_PW}
    restart: unless-stopped
    healthcheck:
      test: pg_isready -U postgres

  client:
    image: leistivo/convert-pheno-ui-client:${DOCKER_IMG_TAG}
    container_name: convert-pheno-client
    # build:
    #   context: ./convertPheno_client
    #   args:
    #     - IGNORE_CACHE_FROM_HERE=${IGNORE_CACHE_FROM_HERE}
    depends_on:
      api:
        condition: service_healthy
    ports:
      - 4173:4173
    environment:
      NODE_ENV: production
      VITE_SECURITY: false
      VITE_API_URL: http://${DOMAIN}:5000/
      VITE_KC_CONFIG: "{}"
    restart: unless-stopped
    healthcheck:
      test: curl -f http://0.0.0.0:4173
      interval: 10s
      timeout: 10s
      retries: 5
    command: /entrypoint_run_vite_preview.sh
    tty: true

  convert-pheno:
    user: ${UID}
    image: manuelrueda/convert-pheno:latest
    container_name: convert-pheno
    restart: unless-stopped
    tty: true
    volumes:
      - api-data:/home
  # sonarqube:
  #   image: sonarqube:9.9.1-community
  #   ports:
  #     - "9000:9000"
  #     - "9092:9092"

volumes:
  postgres-data:
  api-data:
    driver: local
    driver_opts:
      type: none
      device: ${PWD}/data
      o: bind
